// -------------------- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ main.dart --------------------

import 'package:flutter/material.dart';
import 'package:marquee/marquee.dart';
import 'package:share_plus/share_plus.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:provider/provider.dart'; // ‚úÖ Provider for theme switching
import 'auto_image_slider.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart'; // ‚úÖ AdMob ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü
import 'prayer_time_page.dart';



// ‡¶®‡¶ø‡¶ú‡ßá‡¶∞f ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶™‡ßá‡¶ú ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü
import 'mcq_page.dart';
import 'about_page.dart';
import 'contact_page.dart';
import 'developer_page.dart';
import 'privacy_policy_page.dart';
import 'screens/splash_screen.dart';
import 'doya_page.dart';
import 'utils.dart';
import 'ad_helper.dart';

// -------------------- ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶â‡¶á‡¶ú‡ßá‡¶ü --------------------
class BannerAdWidget extends StatefulWidget {
  @override
  _BannerAdWidgetState createState() => _BannerAdWidgetState();
}

class _BannerAdWidgetState extends State<BannerAdWidget> {
  BannerAd? _bannerAd;

  @override
  void initState() {
    super.initState();

    _bannerAd = BannerAd(
      adUnitId: 'ca-app-pub-3940256099942544/6300978111', // ‚úÖ Test Banner ID
      size: AdSize.banner,
      request: AdRequest(),
      listener: BannerAdListener(
        onAdFailedToLoad: (ad, error) {
          ad.dispose();
        },
      ),
    )..load();
  }

  @override
  Widget build(BuildContext context) {
    return _bannerAd == null
        ? SizedBox()
        : Container(
      alignment: Alignment.center,
      width: _bannerAd!.size.width.toDouble(),
      height: _bannerAd!.size.height.toDouble(),
      child: AdWidget(ad: _bannerAd!),
    );
  }

  @override
  void dispose() {
    _bannerAd?.dispose();
    super.dispose();
  }
}

// ‚úÖ Theme Provider Class
class ThemeProvider extends ChangeNotifier {
  ThemeMode _themeMode = ThemeMode.light;
  ThemeMode get themeMode => _themeMode;

  bool get isDarkMode => _themeMode == ThemeMode.dark;

  void toggleTheme(bool isOn) {
    _themeMode = isOn ? ThemeMode.dark : ThemeMode.light;
    notifyListeners();
  }
}

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // ‚úÖ AdMob ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú
  await MobileAds.instance.initialize();

  // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá‡¶á ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶≤‡ßã‡¶°
  AdHelper.loadInterstitialAd();

  runApp(
    ChangeNotifierProvider(
      create: (_) => ThemeProvider(),
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    final themeProvider = Provider.of<ThemeProvider>(context);

    return MaterialApp(
      title: '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶®',
      debugShowCheckedModeBanner: false,
      themeMode: themeProvider.themeMode,
      theme: ThemeData(primarySwatch: Colors.green, brightness: Brightness.light),
      darkTheme: ThemeData(
        primarySwatch: Colors.green,
        brightness: Brightness.dark,
        appBarTheme: AppBarTheme(backgroundColor: Colors.green[900]),
      ),
      home: SplashScreen(),
    );
  }
}

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String? selectedCategory;
  final List<String> categories = [
    '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßÄ ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶ú‡ßç‡¶û‡¶æ‡¶®',
    '‡¶ï‡ßã‡¶∞‡¶Ü‡¶®',
    '‡¶Æ‡¶π‡¶æ‡¶®‡¶¨‡ßÄ ‡¶∏‡¶É ‡¶è‡¶∞ ‡¶ú‡ßÄ‡¶¨‡¶®‡ßÄ',
    '‡¶á‡¶¨‡¶æ‡¶¶‡¶§',
    '‡¶Ü‡¶ñ‡¶ø‡¶∞‡¶æ‡¶§',
    '‡¶¨‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶¨‡¶∏',
    '‡¶®‡¶æ‡¶∞‡ßÄ ‡¶ì ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ',
    '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßÄ ‡¶®‡ßà‡¶§‡¶ø‡¶ï‡¶§‡¶æ ‡¶ì ‡¶Ü‡¶ö‡¶æ‡¶∞',
    '‡¶ß‡¶∞‡ßç‡¶Æ‡ßÄ‡ßü ‡¶Ü‡¶á‡¶®(‡¶¨‡¶ø‡¶¨‡¶æ‡¶π-‡¶¨‡¶ø‡¶ö‡ßç‡¶õ‡ßá‡¶¶)',
    '‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡¶æ‡¶ö‡¶æ‡¶∞',
    '‡¶¶‡¶æ‡¶Æ‡ßç‡¶™‡¶§‡ßç‡¶Ø ‡¶ì ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï',
    '‡¶π‡¶æ‡¶¶‡¶ø‡¶∏',
    '‡¶®‡¶¨‡ßÄ-‡¶∞‡¶æ‡¶∏‡ßÇ‡¶≤',
    '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏',
  ];

  @override
  Widget build(BuildContext context) {
    final themeProvider = Provider.of<ThemeProvider>(context);

    return WillPopScope(
      onWillPop: () async {
        bool exitConfirmed = await showExitConfirmationDialog(context);
        if (exitConfirmed) {
          AdHelper.loadInterstitialAd();
          return true;
        }
        return false;
      },
      child: Scaffold(
        appBar: AppBar(
          title: const Text('‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶®'),
          centerTitle: true,
          backgroundColor: Colors.green[800],
        ),

        // ‚úÖ Drawer ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã
        drawer: Drawer(
          child: ListView(
            padding: EdgeInsets.zero,
            children: [
              DrawerHeader(
                decoration: BoxDecoration(
                  color: Colors.green[800],
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: const [
                    Icon(Icons.menu_book, size: 50, color: Colors.white),
                    SizedBox(height: 10),
                    Text(
                      "‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶®",
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      "‡¶∏‡¶†‡¶ø‡¶ï ‡¶ú‡ßç‡¶û‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßÄ",
                      style: TextStyle(
                        color: Colors.white70,
                        fontSize: 14,
                      ),
                    ),
                  ],
                ),
              ),
              //_buildDrawerItem(context, Icons.book, '‡¶¶‡ßà‡¶®‡¶®‡ßç‡¶¶‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶¨‡¶π‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¶‡ßã‡ßü‡¶æ', DoyaPage()),
              //_buildDrawerItem(context, Icons.access_time, '‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü', const PrayerTimePage()),
              //_buildDrawerItem(context, Icons.info, '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶•‡¶æ', const AboutPage()),
              //_buildDrawerItem(context, Icons.call, '‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó', const ContactPage()),
              // _buildDrawerItem(context, Icons.developer_mode, '‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞', DeveloperPage()),
              //_buildDrawerItem(context, Icons.privacy_tip, 'Privacy Policy', const PrivacyPolicyPage()),
              // Normal Pages
              _buildDrawerItem(context, Icons.book, '‡¶¶‡ßà‡¶®‡¶®‡ßç‡¶¶‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶¨‡¶π‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¶‡ßã‡ßü‡¶æ',
                  page: DoyaPage()),
              _buildDrawerItem(context, Icons.access_time, '‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü',
                  page: const PrayerTimePage()),
              _buildDrawerItem(
                  context, Icons.info, '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶•‡¶æ', page: const AboutPage()),
              _buildDrawerItem(context, Icons.contact_page, '‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó',
                  page: const ContactPage()),
              _buildDrawerItem(context, Icons.developer_mode, '‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞',
                  page: DeveloperPage()),
              // Privacy Policy ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞‡ßá ‡¶ñ‡ßÅ‡¶≤‡¶¨‡ßá
              // Privacy Policy ‚Üí ‡¶è‡¶ñ‡¶® External Browser ‡¶ì‡¶™‡ßá‡¶® ‡¶π‡¶¨‡ßá
              _buildDrawerItem(
                context,
                Icons.privacy_tip,
                'Privacy Policy',
                url: 'https://sites.google.com/view/islamicquize/home',
              ),
              const Divider(),

              // ‚úÖ Dark Mode Toggle
              SwitchListTile(
                title: Text("‡¶°‡¶æ‡¶∞‡ßç‡¶ï ‡¶Æ‡ßã‡¶°"),
                secondary: Icon(
                    themeProvider.isDarkMode ? Icons.dark_mode : Icons
                        .light_mode),
                value: themeProvider.isDarkMode,
                onChanged: (value) {
                  themeProvider.toggleTheme(value);
                },
              ),
            ],
          ),
        ),

        // --- ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶∞ body + bottomNavigationBar ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ---
        body: SingleChildScrollView(
          child: Column(
            children: [
              // üîÉ ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶≤‡¶ø‡¶Ç ‡¶®‡¶ø‡¶â‡¶ú
              Container(
                color: Colors.green.shade100,
                height: 50,
                child: Center(
                  child: Marquee(
                    text:
                    "üìñ ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶á ‡¶è‡¶ï‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡¶§‡ßç‡¶Ø ‡¶ß‡¶∞‡ßç‡¶Æ (‡¶Ü‡¶≤‡ßá ‡¶á‡¶Æ‡¶∞‡¶æ‡¶®: ‡ßß‡ßØ)      üìñ ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶ï‡ßá ‡¶≠‡ßü ‡¶ï‡¶∞‡ßã ‡¶ì ‡¶∏‡¶§‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶•‡¶æ‡¶ï‡ßã (‡¶§‡¶æ‡¶ì‡¶¨‡¶æ: ‡ßß‡ßß‡ßØ)  "
                        " üìñ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶Ö‡¶∂‡ßç‡¶≤‡ßÄ‡¶≤‡¶§‡¶æ ‡¶ì ‡¶Æ‡¶®‡ßç‡¶¶ ‡¶ï‡¶æ‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶ø‡¶∞‡¶§ ‡¶∞‡¶æ‡¶ñ‡ßá (‡¶Ü‡¶®‡¶ï‡¶æ‡¶¨‡ßÅ‡¶§: ‡ß™‡ß´)     üìñ ‡¶π‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶™‡¶æ‡¶≤‡¶ï! ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶® (‡¶§‡ßç‡¶¨-‡¶π‡¶æ: ‡ßß‡ßß‡ß™)   "
                        " üìñ  ‡¶∏‡ßé‡¶ï‡¶æ‡¶ú‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ ‡¶ï‡¶∞‡ßã (‡¶¨‡¶æ‡¶ï‡¶æ‡¶∞‡¶æ‡¶π: ‡ßß‡ß™‡ßÆ)    üìñ ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶∞ ‡¶∏‡ßç‡¶Æ‡¶∞‡¶£‡ßá ‡¶π‡ßÉ‡¶¶‡ßü ‡¶∂‡¶æ‡¶®‡ßç‡¶§‡¶ø ‡¶™‡¶æ‡ßü (‡¶∞‡¶æ‚Äò‡¶¶: ‡ß®‡ßÆ)   "
                        " üìñ ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡¶∞ ‡¶∞‡¶π‡¶Æ‡¶§ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡¶æ‡¶∂ ‡¶π‡ßü‡ßã ‡¶®‡¶æ (‡¶ú‡ßÅ‡¶Æ‡¶æ‡¶∞: ‡ß´‡ß©)    üìñ ‡¶™‡¶ø‡¶§‡¶æ‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶¶‡ßç‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßã (‡¶¨‡¶®‡ßÄ-‡¶á‡¶∏‡¶∞‡¶æ‡¶à‡¶≤: ‡ß®‡ß©)   "
                        " üìñ ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶ß‡ßà‡¶∞‡ßç‡¶Ø ‡¶ß‡¶∞‡ßá, ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ü‡¶õ‡ßá‡¶® (‡¶¨‡¶æ‡¶ï‡¶æ‡¶∞‡¶æ‡¶π: ‡ßß‡ß´‡ß©)    üìñ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡ßü‡¶á ‡¶ï‡¶∑‡ßç‡¶ü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ü‡¶õ‡ßá ‡¶∏‡ßç‡¶¨‡¶∏‡ßç‡¶§‡¶ø (‡¶á‡¶®‡¶∂‡¶ø‡¶∞‡¶æ‡¶π: ‡ß¨)   ",
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.black87,
                    ),
                    scrollAxis: Axis.horizontal,
                    blankSpace: 50.0,
                    velocity: 50.0,
                    pauseAfterRound: Duration(seconds: 1),
                    startPadding: 10.0,
                  ),
                ),
              ),
              const SizedBox(height: 10),

              // ‡¶∏‡ßç‡¶≤‡¶æ‡¶á‡¶°‡¶æ‡¶∞
              Container(
                height: 200,
                color: Colors.green[100],
                child: AutoImageSlider(
                  imageUrls: [
                    'assets/images/slider1.png',
                    'assets/images/slider2.png',
                    'assets/images/slider3.png',
                    'assets/images/slider4.png',
                    'assets/images/slider5.png',
                  ],
                ),
              ),

              const SizedBox(height: 10),

              // üß† ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø + ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßç‡¶ü ‡¶¨‡¶æ‡¶ü‡¶®
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 18.0),
                child: Column(
                  children: [
                    Container(
                      margin: const EdgeInsets.symmetric(
                          horizontal: 16, vertical: 20),
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.green, width: 1.2),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          Text('‡¶¨‡¶ø‡¶∑‡ßü ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
                              style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.green[800])),
                          const SizedBox(height: 10),

                          // Dropdown
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 12),
                            decoration: BoxDecoration(
                              color: Colors.grey[100],
                              borderRadius: BorderRadius.circular(10),
                              border: Border.all(color: Colors.green.shade200),
                            ),
                            child: DropdownButtonHideUnderline(
                              child: DropdownButton<String>(
                                value: selectedCategory,
                                hint: Text(
                                  '‡¶¨‡¶ø‡¶∑‡ßü ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®',
                                  style: TextStyle(
                                    // Dark mode ‡¶π‡¶≤‡ßá ‡¶ï‡¶æ‡¶≤‡ßã, ‡¶®‡¶æ‡¶π‡¶≤‡ßá default
                                    color: Theme
                                        .of(context)
                                        .brightness == Brightness.dark
                                        ? Colors.black
                                        : null,
                                  ),
                                ),
                                icon: const Icon(Icons.arrow_drop_down),
                                isExpanded: true,
                                onChanged: (String? newValue) {
                                  setState(() {
                                    selectedCategory = newValue;
                                  });
                                },
                                items: categories.map((String category) {
                                  return DropdownMenuItem<String>(
                                    value: category,
                                    child: Row(
                                      children: [
                                        const Icon(Icons.bookmark,
                                            size: 18, color: Colors.green),
                                        const SizedBox(width: 8),
                                        Text(category),
                                      ],
                                    ),
                                  );
                                }).toList(),
                              ),
                            ),
                          ),

                          const SizedBox(height: 10),

                          // ‚ñ∂ Start Button
                          ElevatedButton.icon(
                            onPressed: selectedCategory == null
                                ? null
                                : () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) =>
                                      MCQPage(category: selectedCategory!),
                                ),
                              );
                            },
                            icon: const Icon(Icons.play_arrow),
                            label: Text(
                              '‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®',
                              style: TextStyle(
                                fontSize: 16,
                                // Dark mode ‡¶π‡¶≤‡ßá ‡¶ï‡¶æ‡¶≤‡ßã, ‡¶®‡¶æ‡¶π‡¶≤‡ßá default white ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
                                color: Theme
                                    .of(context)
                                    .brightness == Brightness.dark
                                    ? Colors.black
                                    : Colors.black54,
                              ),
                            ),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.green[800],
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(vertical: 14),
                            ),

                          ),
                        ],
                      ),
                    ),

                    const SizedBox(height: 10),

                    // üëâ Body-‡¶§‡ßá ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã Nav Button ‡¶ó‡ßÅ‡¶≤‡ßã‡¶ì ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
                    _buildNavButton(
                        context, '‡¶¶‡ßà‡¶®‡¶®‡ßç‡¶¶‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶¨‡¶π‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¶‡ßã‡ßü‡¶æ', DoyaPage()),
                    _buildNavButton(
                        context, '‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü', const PrayerTimePage()),
                    _buildNavButton(context, '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ï‡¶•‡¶æ', const AboutPage()),
                    _buildNavButton(context, '‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó', const ContactPage()),
                    _buildNavButton(context, '‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞', DeveloperPage()),
                    //_buildNavButton(context, 'Privacy Policy', const PrivacyPolicyPage()),

                    // Privacy Policy ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞‡ßá ‡¶ñ‡ßÅ‡¶≤‡¶¨‡ßá
                    _buildPrivacyPolicyButton(
                      context,
                      'Privacy Policy',
                      'https://sites.google.com/view/islamicquize/home',
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),

        bottomNavigationBar: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            BannerAdWidget(),
            BottomNavigationBar(
              type: BottomNavigationBarType.fixed,
              selectedItemColor: Colors.green[800],
              unselectedItemColor: Colors.grey,
              items: const [
                BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
                BottomNavigationBarItem(
                    icon: Icon(Icons.star_rate), label: 'Rating'),
                BottomNavigationBarItem(
                    icon: Icon(Icons.apps), label: 'Other Apps'),
                BottomNavigationBarItem(
                    icon: Icon(Icons.share), label: 'Share'),
              ],
              onTap: (index) {
                switch (index) {
                  case 1:
                    launchUrl(Uri.parse(
                        'https://play.google.com/store/apps/details?id=com.example.quizapp'));
                    break;
                  case 2:
                    launchUrl(Uri.parse(
                        'https://play.google.com/store/apps/dev?id=YOUR_DEVELOPER_ID'));
                    break;
                  case 3:
                    Share.share(
                      '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶ü‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®:\nhttps://play.google.com/store/apps/details?id=com.example.quizapp',
                    );
                    break;
                }
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNavButton(BuildContext context, String title, Widget page) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12.0),
      child: SizedBox(
        width: double.infinity,
        height: 50,
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.green,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            textStyle: const TextStyle(
              fontSize: 18, fontWeight: FontWeight.bold,),
          ),
          onPressed: () {
            Navigator.push(
                context, MaterialPageRoute(builder: (context) => page));
          },
          child: Text(title, textAlign: TextAlign.center),
        ),
      ),
    );
  }


  Widget _buildPrivacyPolicyButton(BuildContext context, String title,
      String url) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12.0),
      child: SizedBox(
        width: double.infinity,
        height: 50,
        child: ElevatedButton(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.green,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
            textStyle: const TextStyle(
                fontSize: 18, fontWeight: FontWeight.bold),
          ),
          onPressed: () async {
            final Uri uri = Uri.parse(url);
            if (await canLaunchUrl(uri)) {
              await launchUrl(uri, mode: LaunchMode.externalApplication);
            } else {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Could not open Privacy Policy')),
              );
            }
          },
          child: Text(title, textAlign: TextAlign.center),
        ),
      ),
    );
  }


// Drawer Item Builder
  Widget _buildDrawerItem(BuildContext context, IconData icon, String title,
      {Widget? page, String? url}) {
    return ListTile(
      leading: Icon(icon, color: Colors.green[800]),
      title: Text(title,
          style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w500)),
      onTap: () async {
        Navigator.pop(context); // Drawer ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡¶¨‡ßá

        if (url != null) {
          // ‡¶Ø‡¶¶‡¶ø URL ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‚Üí External Browser ‡¶ì‡¶™‡ßá‡¶® ‡¶π‡¶¨‡ßá
          final Uri uri = Uri.parse(url);
          if (await canLaunchUrl(uri)) {
            await launchUrl(uri, mode: LaunchMode.externalApplication);
          } else {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Could not open link')),
            );
          }
        } else if (page != null) {
          // ‡¶Ø‡¶¶‡¶ø Page ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‚Üí Navigator ‡¶¶‡¶ø‡ßü‡ßá ‡¶ì‡¶™‡ßá‡¶® ‡¶π‡¶¨‡ßá
          Navigator.push(
              context, MaterialPageRoute(builder: (context) => page));
        }
      },
    );
  }
}
