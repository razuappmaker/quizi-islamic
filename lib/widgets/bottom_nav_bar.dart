// lib/widgets/bottom_nav_bar.dart
import 'package:flutter/material.dart';
import 'package:share_plus/share_plus.dart';
import 'package:url_launcher/url_launcher.dart';
import '../utils/responsive_utils.dart';

class CustomBottomNavBar extends StatelessWidget {
  final bool isDarkMode;
  final int currentIndex;
  final Function(int) onTap;

  const CustomBottomNavBar({
    super.key,
    required this.isDarkMode,
    required this.currentIndex,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.symmetric(
        horizontal: responsiveValue(context, 16),
        vertical: responsiveValue(context, 8),
      ),
      decoration: BoxDecoration(
        color: isDarkMode ? Colors.green[900] : Colors.white,
        borderRadius: BorderRadius.circular(responsiveValue(context, 16)),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: responsiveValue(context, 6),
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: ResponsivePadding(
        horizontal: 10,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            _buildBottomNavItem(
              context,
              Icons.home,
              '‡¶π‡ßã‡¶Æ',
              0,
              isDarkMode,
              isSelected: currentIndex == 0,
              semanticsLabel: '‡¶π‡ßã‡¶Æ',
            ),
            _buildBottomNavItem(
              context,
              Icons.star,
              '‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç',
              1,
              isDarkMode,
              isSelected: currentIndex == 1,
              semanticsLabel: '‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç',
            ),
            _buildBottomNavItem(
              context,
              Icons.apps,
              '‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø',
              2,
              isDarkMode,
              isSelected: currentIndex == 2,
              semanticsLabel: '‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø',
            ),
            _buildBottomNavItem(
              context,
              Icons.share,
              '‡¶∂‡ßá‡ßü‡¶æ‡¶∞',
              3,
              isDarkMode,
              isSelected: currentIndex == 3,
              semanticsLabel: '‡¶∂‡ßá‡ßü‡¶æ‡¶∞',
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildBottomNavItem(
    BuildContext context,
    IconData icon,
    String label,
    int index,
    bool isDarkMode, {
    bool isSelected = false,
    String? semanticsLabel,
  }) {
    return AnimatedContainer(
      duration: const Duration(milliseconds: 200),
      padding: EdgeInsets.symmetric(
        vertical: responsiveValue(context, 6),
        horizontal: responsiveValue(context, 12),
      ),
      decoration: BoxDecoration(
        color: isSelected
            ? Colors.green[700]!.withOpacity(0.2)
            : Colors.transparent,
        borderRadius: BorderRadius.circular(responsiveValue(context, 12)),
      ),
      child: InkWell(
        onTap: () => onTap(index), // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø onTap callback ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        child: Semantics(
          label: semanticsLabel,
          button: true,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              CircleAvatar(
                radius: responsiveValue(context, 16),
                backgroundColor: isSelected
                    ? Colors.green[700]
                    : (isDarkMode ? Colors.green[800] : Colors.green[200]),
                child: Icon(
                  icon,
                  size: responsiveValue(context, 20),
                  color: isSelected
                      ? Colors.white
                      : (isDarkMode ? Colors.white : Colors.green[700]),
                ),
              ),
              ResponsiveSizedBox(height: 4),
              ResponsiveText(
                label,
                fontSize: 11,
                color: isSelected
                    ? Colors.green[700]!
                    : (isDarkMode ? Colors.white : Colors.green[700]!),
                semanticsLabel: label,
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Static method for handling bottom nav item taps
  static Future<void> handleBottomNavItemTap(
    BuildContext context,
    int index,
  ) async {
    try {
      switch (index) {
        case 0:
          // ‡¶π‡ßã‡¶Æ - ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡¶æ‡¶á (‡¶™‡ßá‡¶ú‡ßá ‡¶Ü‡¶õ‡ßá‡¶á)
          break;

        case 1:
          // ‡¶∞‡ßá‡¶ü‡¶ø‡¶Ç
          final Uri ratingUri = Uri.parse(
            'https://play.google.com/store/apps/details?id=com.example.quizapp',
          );
          if (await canLaunchUrl(ratingUri)) {
            await launchUrl(ratingUri, mode: LaunchMode.externalApplication);
          } else {
            _showSnackBar(context, 'Google Play ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø');
          }
          break;

        case 2:
          // ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™
          final Uri devUri = Uri.parse(
            'https://play.google.com/store/apps/dev?id=YOUR_DEVELOPER_ID',
          );
          if (await canLaunchUrl(devUri)) {
            await launchUrl(devUri, mode: LaunchMode.externalApplication);
          } else {
            _showSnackBar(context, '‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø');
          }
          break;

        case 3:
          // ‡¶∂‡ßá‡ßü‡¶æ‡¶∞
          await Share.share(
            'üì≤ ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®:\n'
            'https://play.google.com/store/apps/details?id=com.example.quizapp',
          );
          break;
      }
    } catch (e) {
      _showSnackBar(context, '‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: $e');
    }
  }

  /// Snackbar helper
  static void _showSnackBar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(message), duration: const Duration(seconds: 2)),
    );
  }
}
