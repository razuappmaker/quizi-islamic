// lib/services/notification_manager.dart
import 'dart:async';
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:awesome_notifications/awesome_notifications.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../presentation/providers/language_provider.dart';

class NotificationManager {
  static final NotificationManager _instance = NotificationManager._internal();

  factory NotificationManager() => _instance;

  NotificationManager._internal();

  static const String _channelKey = 'prayer_reminder_channel';
  static const String _lastScheduleKey = 'last_notification_schedule';
  BuildContext? _context;
  bool _isEnglishCached = false;

  // Context ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  void setContext(BuildContext context) {
    _context = context;
    _updateLanguageCache();
    print(
      'üéØ NotificationManager context set for language: ${_isEnglishCached ? 'English' : 'Bengali'}',
    );
  }

  // ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
  void _updateLanguageCache() {
    if (_context != null) {
      try {
        final languageProvider = Provider.of<LanguageProvider>(
          _context!,
          listen: false,
        );
        _isEnglishCached = languageProvider.isEnglish;
      } catch (e) {
        print('Error getting language from context: $e');
        _isEnglishCached = false;
      }
    } else {
      _isEnglishCached = false;
    }
  }

  // ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ - Synchronous
  bool get _isEnglish {
    return _isEnglishCached;
  }

  // SharedPreferences ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡¶æ‡¶∑‡¶æ async ‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ (‡¶∂‡ßÅ‡¶ß‡ßÅ fallback ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
  Future<bool> _getLanguageFromPrefs() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final savedLang = prefs.getString('current_language') ?? 'bn';
      return savedLang == 'en';
    } catch (e) {
      return false; // ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ
    }
  }

  // ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
  final Map<String, Map<String, String>> _notificationTexts = {
    'prayer_reminder_title': {
      'en': 'üïå Prayer Time Reminder',
      'bn': 'üïå ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞',
    },

    'prayer_reminder_body': {
      'en':
          '5 minutes left for {prayer} Azan. '
          'Azan time: {time}, '
          'please prepare for prayer.',
      'bn':
          '{prayer} ‡¶Ü‡¶Ø‡¶æ‡¶® ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶¨‡¶æ‡¶ï‡¶ø‡•§ '
          '‡¶Ü‡¶Ø‡¶æ‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßü: {time}, '
          '‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø ‡¶®‡¶ø‡¶®',
    },
    'fajr': {'en': 'Fajr', 'bn': '‡¶´‡¶ú‡¶∞'},
    'dhuhr': {'en': 'Dhuhr', 'bn': '‡¶Ø‡ßã‡¶π‡¶∞'},
    'asr': {'en': 'Asr', 'bn': '‡¶Ü‡¶∏‡¶∞'},
    'maghrib': {'en': 'Maghrib', 'bn': '‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨'},
    'isha': {'en': 'Isha', 'bn': '‡¶á‡¶∂‡¶æ'},
  };

  // ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º‡¶ï‡ßÉ‡¶§ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ
  String _getLocalizedText(String key) {
    final langKey = _isEnglish ? 'en' : 'bn';
    return _notificationTexts[key]?[langKey] ?? key;
  }

  // ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º‡¶ï‡ßÉ‡¶§ ‡¶®‡¶æ‡¶Æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ
  String _getLocalizedPrayerName(String banglaPrayerName) {
    if (_isEnglish) {
      switch (banglaPrayerName) {
        case '‡¶´‡¶ú‡¶∞':
          return _getLocalizedText('fajr');
        case '‡¶Ø‡ßã‡¶π‡¶∞':
          return _getLocalizedText('dhuhr');
        case '‡¶Ü‡¶∏‡¶∞':
          return _getLocalizedText('asr');
        case '‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨':
          return _getLocalizedText('maghrib');
        case '‡¶á‡¶∂‡¶æ':
          return _getLocalizedText('isha');
        default:
          return banglaPrayerName;
      }
    }
    return banglaPrayerName;
  }

  // ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
  Future<void> initializeNotificationChannel() async {
    await AwesomeNotifications().initialize(null, [
      NotificationChannel(
        channelKey: _channelKey,
        channelName: 'Prayer Reminders',
        channelDescription: 'Notifications for prayer times',
        defaultColor: const Color(0xFF1B5E20),
        ledColor: const Color(0xFF1B5E20),
        importance: NotificationImportance.High,
        locked: true,
        enableVibration: true,
        enableLights: true,
        playSound: true,
        criticalAlerts: true,
      ),
    ], debug: true);
  }

  // ‡¶∏‡¶¨ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡¶æ
  Future<void> scheduleAllPrayerNotifications(
    Map<String, String> prayerTimes,
    Map<String, int> adjustments,
  ) async {
    if (prayerTimes.isEmpty) return;

    // ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    _updateLanguageCache();

    // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶∏‡ßá‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
    await cancelAllNotifications();

    final adjustedTimes = _getAdjustedPrayerTimes(prayerTimes, adjustments);

    int scheduledCount = 0;

    for (final entry in adjustedTimes.entries) {
      final prayerName = entry.key;
      final time = entry.value;

      if (["‡¶´‡¶ú‡¶∞", "‡¶Ø‡ßã‡¶π‡¶∞", "‡¶Ü‡¶∏‡¶∞", "‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨", "‡¶á‡¶∂‡¶æ"].contains(prayerName)) {
        final success = await _schedulePrayerNotification(prayerName, time);
        if (success) scheduledCount++;
      }
    }

    print(
      '‚úÖ $scheduledCount notifications scheduled in ${_isEnglish ? 'English' : 'Bengali'}',
    );

    // ‡¶∂‡ßá‡¶∑ ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(_lastScheduleKey, DateTime.now().millisecondsSinceEpoch);
  }

  // ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡¶æ
  Future<bool> _schedulePrayerNotification(
    String prayerName,
    String time,
  ) async {
    try {
      // ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶∏‡ßá‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
      await AwesomeNotifications().cancel(prayerName.hashCode);

      final prayerDate = _parsePrayerTime(time);
      if (prayerDate == null) return false;

      final notificationTime = prayerDate.subtract(const Duration(minutes: 5));
      final now = DateTime.now();

      // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
      DateTime scheduleTime;
      if (notificationTime.isAfter(now)) {
        scheduleTime = notificationTime;
      } else {
        // ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
        scheduleTime = notificationTime.add(const Duration(days: 1));
      }

      await _createNotification(prayerName, scheduleTime, time);
      return true;
    } catch (e) {
      print("‚ùå Error scheduling notification for $prayerName: $e");
      return false;
    }
  }

  // ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ - Language Support ‡¶∏‡¶π

  Future<void> _createNotification(
    String prayerName,
    DateTime scheduleTime,
    String prayerTime,
  ) async {
    final localizedPrayerName = _getLocalizedPrayerName(prayerName);
    final title = _getLocalizedText('prayer_reminder_title');

    // üî• ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßá‡¶ü‡ßá‡¶° ‡¶∏‡¶Æ‡ßü
    final formattedTime = _isEnglish
        ? _formatTimeTo12Hour(prayerTime)
        : _formatTimeForPrayerBangla(
            prayerName,
            prayerTime,
          ); // üî• ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®

    final body = _getLocalizedText('prayer_reminder_body')
        .replaceAll('{prayer}', localizedPrayerName)
        .replaceAll('{time}', formattedTime);

    await AwesomeNotifications().createNotification(
      content: NotificationContent(
        id: prayerName.hashCode,
        channelKey: _channelKey,
        title: title,
        body: body,
        notificationLayout: NotificationLayout.Default,
        wakeUpScreen: true,
        criticalAlert: true,
        color: const Color(0xFF1B5E20),
      ),
      schedule: NotificationCalendar(
        year: scheduleTime.year,
        month: scheduleTime.month,
        day: scheduleTime.day,
        hour: scheduleTime.hour,
        minute: scheduleTime.minute,
        second: 0,
        allowWhileIdle: true,
        preciseAlarm: true,
      ),
    );

    print(
      'üìÖ Scheduled: $localizedPrayerName at $scheduleTime (${_isEnglish ? 'English' : 'Bengali'})',
    );
  }

  // Adjusted prayer times ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
  Map<String, String> _getAdjustedPrayerTimes(
    Map<String, String> prayerTimes,
    Map<String, int> adjustments,
  ) {
    final adjustedTimes = Map<String, String>.from(prayerTimes);

    for (final entry in adjustments.entries) {
      final prayerName = entry.key;
      final adjustment = entry.value;

      if (adjustedTimes.containsKey(prayerName) && adjustment != 0) {
        final originalTime = adjustedTimes[prayerName]!;
        final adjustedTime = _adjustPrayerTime(originalTime, adjustment);
        adjustedTimes[prayerName] = adjustedTime;
      }
    }

    return adjustedTimes;
  }

  // ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
  String _adjustPrayerTime(String time, int adjustmentMinutes) {
    try {
      final parts = time.split(':');
      if (parts.length != 2) return time;

      int hours = int.parse(parts[0]);
      int minutes = int.parse(parts[1]);

      minutes += adjustmentMinutes;

      while (minutes >= 60) {
        minutes -= 60;
        hours = (hours + 1) % 24;
      }

      while (minutes < 0) {
        minutes += 60;
        hours = (hours - 1) % 24;
        if (hours < 0) hours += 24;
      }

      return '${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}';
    } catch (e) {
      print('Error adjusting prayer time: $e');
      return time;
    }
  }

  // 24-hour to 12-hour format conversion method
  String _formatTimeTo12Hour(String time24Hour) {
    try {
      final parts = time24Hour.split(':');
      if (parts.length != 2) return time24Hour;

      int hour = int.parse(parts[0]);
      int minute = int.parse(parts[1]);

      String period = hour >= 12 ? 'PM' : 'AM';

      // Convert to 12-hour format
      if (hour > 12) {
        hour = hour - 12;
      } else if (hour == 0) {
        hour = 12;
      }

      return '$hour:${minute.toString().padLeft(2, '0')} $period';
    } catch (e) {
      print('Error formatting time: $e');
      return time24Hour;
    }
  }

  // ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Æ‡ßü format (‡¶∏‡¶ï‡¶æ‡¶≤/‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤)
  String _formatTimeTo12HourBangla(String time24Hour) {
    try {
      final parts = time24Hour.split(':');
      if (parts.length != 2) return time24Hour;

      int hour = int.parse(parts[0]);
      int minute = int.parse(parts[1]);

      String period = hour >= 12 ? '‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤' : '‡¶∏‡¶ï‡¶æ‡¶≤';

      // Convert to 12-hour format
      if (hour > 12) {
        hour = hour - 12;
      } else if (hour == 0) {
        hour = 12;
      }

      return '$hour:${minute.toString().padLeft(2, '0')} $period';
    } catch (e) {
      print('Error formatting time: $e');
      return time24Hour;
    }
  }

  // ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßü ‡¶´‡¶∞‡¶Æ‡ßá‡¶ü - UPDATED
  String _formatTimeForPrayerBangla(String prayerName, String time24Hour) {
    try {
      final parts = time24Hour.split(':');
      if (parts.length != 2) return time24Hour;

      int hour = int.parse(parts[0]);
      int minute = int.parse(parts[1]);

      // ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßü‡ßá‡¶∞ ‡¶Ö‡¶Ç‡¶∂
      String timePeriod = _getPrayerTimePeriod(prayerName, hour);

      // Convert to 12-hour format
      if (hour > 12) {
        hour = hour - 12;
      } else if (hour == 0) {
        hour = 12;
      }

      // üî• ‡¶∏‡¶Æ‡ßü‡ßá‡¶∞ ‡¶Ö‡¶Ç‡¶∂ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶∏‡¶Æ‡ßü
      return '$timePeriod $hour:${minute.toString().padLeft(2, '0')}';
    } catch (e) {
      print('Error formatting prayer time: $e');
      return time24Hour;
    }
  }

  // ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßü‡ßá‡¶∞ ‡¶Ö‡¶Ç‡¶∂ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£
  String _getPrayerTimePeriod(String prayerName, int hour) {
    switch (prayerName) {
      case '‡¶´‡¶ú‡¶∞':
        return '‡¶≠‡ßã‡¶∞';
      case '‡¶Ø‡ßã‡¶π‡¶∞':
        return '‡¶¶‡ßÅ‡¶™‡ßÅ‡¶∞';
      case '‡¶Ü‡¶∏‡¶∞':
        return '‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤';
      case '‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨':
        return '‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ';
      case '‡¶á‡¶∂‡¶æ':
        return hour >= 20 ? '‡¶∞‡¶æ‡¶§' : '‡¶∏‡¶®‡ßç‡¶ß‡ßç‡¶Ø‡¶æ'; // ‡ßÆ‡¶ü‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶∞‡¶æ‡¶§
      default:
        return hour >= 12 ? '‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤' : '‡¶∏‡¶ï‡¶æ‡¶≤';
    }
  }

  // ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ
  DateTime? _parsePrayerTime(String time) {
    try {
      final now = DateTime.now();
      final parts = time.split(':');
      if (parts.length != 2) return null;

      final hour = int.parse(parts[0]);
      final minute = int.parse(parts[1]);

      return DateTime(now.year, now.month, now.day, hour, minute);
    } catch (e) {
      print('Error parsing prayer time: $e');
      return null;
    }
  }

  // Boot Complete ‡¶π‡¶≤‡ßá ‡¶∏‡¶¨ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∞‡¶ø‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡¶æ
  Future<void> _rescheduleAllNotificationsOnBoot() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final String? savedPrayerTimes = prefs.getString("prayerTimes");

      if (savedPrayerTimes != null) {
        final Map<String, String> prayerTimes = Map<String, String>.from(
          jsonDecode(savedPrayerTimes),
        );

        final Map<String, int> prayerTimeAdjustments = {
          "‡¶´‡¶ú‡¶∞": prefs.getInt('adjustment_fajr') ?? 0,
          "‡¶Ø‡ßã‡¶π‡¶∞": prefs.getInt('adjustment_dhuhr') ?? 0,
          "‡¶Ü‡¶∏‡¶∞": prefs.getInt('adjustment_asr') ?? 0,
          "‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨": prefs.getInt('adjustment_maghrib') ?? 0,
          "‡¶á‡¶∂‡¶æ": prefs.getInt('adjustment_isha') ?? 0,
        };

        await scheduleAllPrayerNotifications(
          prayerTimes,
          prayerTimeAdjustments,
        );
        print('‚úÖ All notifications rescheduled after boot');
      }
    } catch (e) {
      print('Error rescheduling notifications on boot: $e');
    }
  }

  // ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶∞‡¶Æ‡¶ø‡¶∂‡¶® ‡¶ö‡ßá‡¶ï
  Future<bool> checkAndRequestNotificationPermission() async {
    bool isNotificationAllowed = await AwesomeNotifications()
        .isNotificationAllowed();

    if (!isNotificationAllowed) {
      isNotificationAllowed = await AwesomeNotifications()
          .requestPermissionToSendNotifications(
            channelKey: _channelKey,
            permissions: [
              NotificationPermission.Alert,
              NotificationPermission.Sound,
              NotificationPermission.Badge,
              NotificationPermission.Vibration,
              NotificationPermission.Light,
              NotificationPermission.CriticalAlert,
            ],
          );
    }

    return isNotificationAllowed;
  }

  // ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶π‡ßá‡¶≤‡¶• ‡¶ö‡ßá‡¶ï
  Future<void> checkNotificationSystemHealth() async {
    try {
      // ‡ßß. ‡¶™‡¶æ‡¶∞‡¶Æ‡¶ø‡¶∂‡¶® ‡¶ö‡ßá‡¶ï
      final isAllowed = await AwesomeNotifications().isNotificationAllowed();
      print('üîî Notification Permission: $isAllowed');

      // ‡ß®. ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤‡ßç‡¶° ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡ßá‡¶ï
      final scheduledNotifications = await AwesomeNotifications()
          .listScheduledNotifications();
      print(
        'üìã Currently scheduled notifications: ${scheduledNotifications.length}',
      );

      for (final notification in scheduledNotifications) {
        final content = notification.content;
        print(' - ${content?.title} (ID: ${content?.id})');
      }

      // ‡ß©. ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏
      print('üåê Notification Language: ${_isEnglish ? 'English' : 'Bengali'}');
    } catch (e) {
      print('‚ùå Notification system health check failed: $e');
    }
  }

  // ‡¶∏‡¶¨ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶∏‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ
  Future<void> cancelAllNotifications() async {
    await AwesomeNotifications().cancelAll();
    print('üóëÔ∏è All notifications cancelled');
  }

  // ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶∏‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ
  Future<void> cancelPrayerNotification(String prayerName) async {
    await AwesomeNotifications().cancel(prayerName.hashCode);
    print('üóëÔ∏è Notification cancelled for: $prayerName');
  }

  // ‡¶∂‡ßá‡¶∑ ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
  Future<bool> shouldRescheduleNotifications() async {
    final prefs = await SharedPreferences.getInstance();
    final lastSchedule = prefs.getInt(_lastScheduleKey);

    if (lastSchedule == null) return true;

    final lastScheduleTime = DateTime.fromMillisecondsSinceEpoch(lastSchedule);
    final now = DateTime.now();

    // ‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶∞‡¶ø‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
    return now.difference(lastScheduleTime).inHours >= 24;
  }

  // Test notification (‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
  Future<void> sendTestNotification() async {
    final title = _getLocalizedText('prayer_reminder_title');
    final body = _isEnglish
        ? 'Test notification from Prayer Time App'
        : '‡¶™‡ßç‡¶∞‡¶æ‡¶∞‡ßç‡¶•‡¶®‡¶æ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®';

    await AwesomeNotifications().createNotification(
      content: NotificationContent(
        id: 9999,
        channelKey: _channelKey,
        title: title,
        body: body,
        notificationLayout: NotificationLayout.Default,
      ),
    );
    print('‚úÖ Test notification sent in ${_isEnglish ? 'English' : 'Bengali'}');
  }

  // ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂
  Future<void> refreshNotificationsWithNewLanguage(
    Map<String, String> prayerTimes,
    Map<String, int> adjustments,
  ) async {
    print(
      'üîÑ Refreshing notifications with new language: ${_isEnglish ? 'English' : 'Bengali'}',
    );
    await scheduleAllPrayerNotifications(prayerTimes, adjustments);
  }

  // Static methods for boot complete handling
  @pragma('vm:entry-point')
  static Future<void> onActionReceivedMethod(
    ReceivedAction receivedAction,
  ) async {
    print('Action received: ${receivedAction.id}');
    if (receivedAction.actionType == ActionType.SilentBackgroundAction) {
      await _instance._rescheduleAllNotificationsOnBoot();
    }
  }

  @pragma('vm:entry-point')
  static Future<void> onNotificationCreatedMethod(
    ReceivedNotification receivedNotification,
  ) async {
    print('Notification created: ${receivedNotification.id}');
  }

  @pragma('vm:entry-point')
  static Future<void> onNotificationDisplayedMethod(
    ReceivedNotification receivedNotification,
  ) async {
    print('Notification displayed: ${receivedNotification.id}');
  }

  @pragma('vm:entry-point')
  static Future<void> onDismissActionReceivedMethod(
    ReceivedAction receivedAction,
  ) async {
    print('Notification dismissed: ${receivedAction.id}');
  }
}
