// utils/in_app_purchase_manager.dart - ROBUST VERSION
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import '../managers/premium_manager.dart';

class InAppPurchaseManager {
  static final InAppPurchaseManager _instance =
      InAppPurchaseManager._internal();

  factory InAppPurchaseManager() => _instance;

  InAppPurchaseManager._internal();

  final InAppPurchase _inAppPurchase = InAppPurchase.instance;
  StreamSubscription<List<PurchaseDetails>>? _subscription;

  List<ProductDetails> _products = [];
  bool _isAvailable = false;
  bool _isInitialized = false;
  bool _hasValidProducts = false;

  // ЁЯФе PRODUCT IDs - ржЖржкржирж┐ ржкрж░рзЗ Google Console ржП create ржХрж░ржмрзЗржи
  static const String monthlyPremiumId = 'monthly_premium';
  static const String yearlyPremiumId = 'yearly_premium';
  static const String lifetimePremiumId = 'lifetime_premium';
  static const String removeAdsId = 'remove_ads';

  // Product configurations - UI рждрзЗ show ржХрж░рж╛рж░ ржЬржирзНржп
  final Map<String, Map<String, dynamic>> _productConfigs = {
    monthlyPremiumId: {
      'name': 'ржорж╛рж╕рж┐ржХ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо',
      'description': 'рзз ржорж╛рж╕рзЗрж░ ржЬржирзНржп ржЕрзНржпрж╛ржб-ржлрзНрж░рж┐ ржПржХрзНрж╕ржкрзЗрж░рж┐рзЯрзЗржирзНрж╕',
      'duration': 30,
      'demoPrice': 'рз│ рззрзлрзж/ржорж╛рж╕', // ЁЯФе Demo price
    },
    yearlyPremiumId: {
      'name': 'ржмрж╛рж░рзНрж╖рж┐ржХ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо',
      'description': 'рзз ржмржЫрж░рзЗрж░ ржЬржирзНржп ржЕрзНржпрж╛ржб-ржлрзНрж░рж┐ ржПржХрзНрж╕ржкрзЗрж░рж┐рзЯрзЗржирзНрж╕',
      'duration': 365,
      'demoPrice': 'рз│ рзз,рзирзжрзж/ржмржЫрж░',
    },
    lifetimePremiumId: {
      'name': 'рж▓рж╛ржЗржлржЯрж╛ржЗржо ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо',
      'description': 'ржЖржЬрзАржмржи ржЕрзНржпрж╛ржб-ржлрзНрж░рж┐ ржПржХрзНрж╕ржкрзЗрж░рж┐рзЯрзЗржирзНрж╕',
      'duration': null,
      'demoPrice': 'рз│ рзи,рзлрзжрзж',
    },
    removeAdsId: {
      'name': 'ржЕрзНржпрж╛ржб рж░рж┐ржорзБржнрж╛рж▓',
      'description': 'рж╕рзНржерж╛рзЯрзАржнрж╛ржмрзЗ ржЕрзНржпрж╛ржб ржорзБржЫрзБржи',
      'duration': null,
      'demoPrice': 'рз│ рзлрзжрзж',
    },
  };

  Future<void> initialize() async {
    if (_isInitialized) return;

    try {
      _isAvailable = await _inAppPurchase.isAvailable();

      if (!_isAvailable) {
        print('тЪая╕П ржЗржи-ржЕрзНржпрж╛ржк ржкрж╛рж░ржЪрзЗржЬ ржПржЗ ржбрж┐ржнрж╛ржЗрж╕рзЗ available ржирзЯ');
        _hasValidProducts = false;
        return;
      }

      // Listen to purchase updates
      _subscription = _inAppPurchase.purchaseStream.listen(
        _handlePurchaseUpdate,
        onDone: () => _subscription?.cancel(),
        onError: (error) => print('тЭМ Purchase stream error: $error'),
      );

      // Load products
      await _loadProducts();

      _isInitialized = true;
      print('тЬЕ ржЗржи-ржЕрзНржпрж╛ржк ржкрж╛рж░ржЪрзЗржЬ ржорзНржпрж╛ржирзЗржЬрж╛рж░ initialized рж╣рзЯрзЗржЫрзЗ');
    } catch (e) {
      print('тЭМ ржЗржи-ржЕрзНржпрж╛ржк ржкрж╛рж░ржЪрзЗржЬ initialize ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐: $e');
      _hasValidProducts = false;
    }
  }

  Future<void> _loadProducts() async {
    try {
      final Set<String> productIds = _productConfigs.keys.toSet();
      print('ЁЯФД ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж▓рзЛржб ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ: $productIds');

      final ProductDetailsResponse response = await _inAppPurchase
          .queryProductDetails(productIds);

      if (response.notFoundIDs.isNotEmpty) {
        print('тЪая╕П ржПржЗ ржкрзНрж░рзЛржбрж╛ржХрзНржЯржЧрзБрж▓рзЛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐: ${response.notFoundIDs}');
        print('ЁЯТб ржПржЧрзБрж▓рзЛ ржкрж░рзЗ Google Play Console ржП create ржХрж░ржмрзЗржи');
      }

      if (response.error != null) {
        print('тЭМ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж▓рзЛржб ржХрж░рждрзЗ ржПрж░рж░: ${response.error}');
      }

      setState(() {
        _products = response.productDetails;
        _hasValidProducts = _products.isNotEmpty;
      });

      print('тЬЕ ${_products.length} ржЯрж┐ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж▓рзЛржб рж╣рзЯрзЗржЫрзЗ');

      // Available products print ржХрж░рзБржи
      if (_products.isNotEmpty) {
        print('ЁЯОЙ Available Products:');
        for (var product in _products) {
          print('   тЬЕ ${product.id} - ${product.price}');
        }
      } else {
        print(
          'ЁЯТб ржХрзЛржирзЛ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ available ржирзЗржЗред ржкрж░рзЗ Google Console ржП create ржХрж░ржмрзЗржиред',
        );
      }
    } catch (e) {
      print('тЭМ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж▓рзЛржб ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐: $e');
      _hasValidProducts = false;
    }
  }

  Future<bool> purchaseProduct(String productId) async {
    try {
      if (!_isAvailable || !_hasValidProducts) {
        print('тЭМ ржЗржи-ржЕрзНржпрж╛ржк ржкрж╛рж░ржЪрзЗржЬ available ржирзЯ ржЕржержмрж╛ ржХрзЛржирзЛ ржкрзНрж░рзЛржбрж╛ржХрзНржЯ ржирзЗржЗ');
        _showNotAvailableMessage();
        return false;
      }

      if (!isProductAvailable(productId)) {
        print('тЭМ ржПржЗ ржкрзНрж░рзЛржбрж╛ржХрзНржЯржЯрж┐ available ржирзЯ: $productId');
        _showNotAvailableMessage();
        return false;
      }

      final product = _products.firstWhere((p) => p.id == productId);

      print('ЁЯФД ржкрж╛рж░ржЪрзЗржЬ рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ: $productId - ${product.price}');

      final PurchaseParam purchaseParam = PurchaseParam(
        productDetails: product,
      );

      final bool purchaseSuccess = await _inAppPurchase.buyNonConsumable(
        purchaseParam: purchaseParam,
      );

      if (purchaseSuccess) {
        print('тЬЕ ржкрж╛рж░ржЪрзЗржЬ рж╢рзБрж░рзБ рж╣рзЯрзЗржЫрзЗ: $productId');
        return true;
      } else {
        print('тЭМ ржкрж╛рж░ржЪрзЗржЬ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: $productId');
        return false;
      }
    } catch (e) {
      print('тЭМ ржкрж╛рж░ржЪрзЗржЬ рж╢рзБрж░рзБ ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐: $e');
      _showNotAvailableMessage();
      return false;
    }
  }

  void _showNotAvailableMessage() {
    // ржЖржкржирж┐ ржПржЦрж╛ржирзЗ user ржХрзЗ message show ржХрж░рждрзЗ ржкрж╛рж░рзЗржи
    print('ЁЯТб ржкрзНрж░рзЛржбрж╛ржХрзНржЯржЧрзБрж▓рзЛ рж╢рзАржШрзНрж░ржЗ available рж╣ржмрзЗред');
  }

  void _handlePurchaseUpdate(List<PurchaseDetails> purchaseDetailsList) {
    for (var purchaseDetails in purchaseDetailsList) {
      _handlePurchase(purchaseDetails);
    }
  }

  void _handlePurchase(PurchaseDetails purchaseDetails) async {
    switch (purchaseDetails.status) {
      case PurchaseStatus.purchased:
        await _handleSuccessfulPurchase(purchaseDetails);
        break;
      case PurchaseStatus.error:
        print('тЭМ ржкрж╛рж░ржЪрзЗржЬ ржПрж░рж░: ${purchaseDetails.error?.message}');
        break;
      case PurchaseStatus.pending:
        print('тП│ ржкрж╛рж░ржЪрзЗржЬ ржкрзЗржирзНржбрж┐ржВ: ${purchaseDetails.productID}');
        break;
      case PurchaseStatus.restored:
        await _handleSuccessfulPurchase(purchaseDetails);
        break;
      default:
        print('тД╣я╕П Purchase status: ${purchaseDetails.status}');
    }
  }

  Future<void> _handleSuccessfulPurchase(
    PurchaseDetails purchaseDetails,
  ) async {
    try {
      final productId = purchaseDetails.productID;
      final config = _productConfigs[productId];

      if (config != null) {
        await PremiumManager().activatePremiumWithPurchase(
          productId: productId,
          durationInDays: config['duration'] ?? 30,
        );

        print('тЬЕ ржкрзНрж░рж┐ржорж┐рзЯрж╛ржо ржПржХрзНржЯрж┐ржнрзЗржЯрзЗржб: $productId');

        if (purchaseDetails.pendingCompletePurchase) {
          await _inAppPurchase.completePurchase(purchaseDetails);
        }
      }
    } catch (e) {
      print('тЭМ ржкрж╛рж░ржЪрзЗржЬ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рждрзЗ рждрзНрж░рзБржЯрж┐: $e');
    }
  }

  List<ProductDetails> get products => _products;

  bool get isAvailable => _isAvailable;

  bool get isInitialized => _isInitialized;

  bool get hasValidProducts => _hasValidProducts;

  Map<String, dynamic>? getProductConfig(String productId) {
    return _productConfigs[productId];
  }

  // ЁЯФе Get product price - ржпржжрж┐ available ржирж╛ ржерж╛ржХрзЗ demo price show ржХрж░ржмрзЗ
  String getProductPrice(String productId) {
    try {
      final product = _products.firstWhere((p) => p.id == productId);
      return product.price;
    } catch (e) {
      return _productConfigs[productId]?['demoPrice'] ?? 'рж╢рзАржШрзНрж░ржЗ ржЖрж╕ржЫрзЗ';
    }
  }

  // ЁЯФе Check if product is available
  bool isProductAvailable(String productId) {
    return _products.any((product) => product.id == productId);
  }

  // ЁЯФе Check if ANY product is available
  bool get areProductsAvailable => _products.isNotEmpty;

  void dispose() {
    _subscription?.cancel();
    _subscription = null;
    _isInitialized = false;
  }

  void setState(VoidCallback callback) {
    callback();
  }
}
