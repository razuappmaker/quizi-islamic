// lib/services/notification_manager.dart
import 'dart:async';
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:awesome_notifications/awesome_notifications.dart';
import 'package:flutter/material.dart';

class NotificationManager {
  static final NotificationManager _instance = NotificationManager._internal();

  factory NotificationManager() => _instance;

  NotificationManager._internal();

  static const String _channelKey = 'prayer_reminder_channel';
  static const String _lastScheduleKey = 'last_notification_schedule';

  // ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
  Future<void> initializeNotificationChannel() async {
    await AwesomeNotifications().initialize(null, [
      NotificationChannel(
        channelKey: _channelKey,
        channelName: 'Prayer Reminders',
        channelDescription: 'Notifications for prayer times',
        defaultColor: const Color(0xFF1B5E20),
        // ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø Color object ‡¶¶‡¶ø‡¶®
        ledColor: const Color(0xFF1B5E20),
        // ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø Color object ‡¶¶‡¶ø‡¶®
        importance: NotificationImportance.High,
        locked: true,
        enableVibration: true,
        enableLights: true,
        playSound: true,
        criticalAlerts: true,
      ),
    ], debug: true);

    // Boot Complete Listener ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
    //_setupBootCompleteListener();
  }

  // Boot Complete Listener ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
  /* void _setupBootCompleteListener() {
    AwesomeNotifications().setListeners(
      onActionReceivedMethod: _onActionReceivedMethod,
      onNotificationCreatedMethod: _onNotificationCreatedMethod,
      onNotificationDisplayedMethod: _onNotificationDisplayedMethod,
      onDismissActionReceivedMethod: _onDismissActionReceivedMethod,
    );
  }*/

  // Static methods for boot complete handling
  @pragma('vm:entry-point')
  static Future<void> _onActionReceivedMethod(
    ReceivedAction receivedAction,
  ) async {
    print('Action received: ${receivedAction.id}');

    if (receivedAction.actionType == ActionType.SilentBackgroundAction) {
      await _instance._rescheduleAllNotificationsOnBoot();
    }
  }

  @pragma('vm:entry-point')
  static Future<void> _onNotificationCreatedMethod(
    ReceivedNotification receivedNotification,
  ) async {
    print('Notification created: ${receivedNotification.id}');
  }

  @pragma('vm:entry-point')
  static Future<void> _onNotificationDisplayedMethod(
    ReceivedNotification receivedNotification,
  ) async {
    print('Notification displayed: ${receivedNotification.id}');
  }

  @pragma('vm:entry-point')
  static Future<void> _onDismissActionReceivedMethod(
    ReceivedAction receivedAction,
  ) async {
    print('Notification dismissed: ${receivedAction.id}');
  }

  // ‡¶∏‡¶¨ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡¶æ
  Future<void> scheduleAllPrayerNotifications(
    Map<String, String> prayerTimes,
    Map<String, int> adjustments,
  ) async {
    if (prayerTimes.isEmpty) return;

    final adjustedTimes = _getAdjustedPrayerTimes(prayerTimes, adjustments);

    for (final entry in adjustedTimes.entries) {
      final prayerName = entry.key;
      final time = entry.value;

      if (["‡¶´‡¶ú‡¶∞", "‡¶Ø‡ßã‡¶π‡¶∞", "‡¶Ü‡¶∏‡¶∞", "‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨", "‡¶á‡¶∂‡¶æ"].contains(prayerName)) {
        await _schedulePrayerNotification(prayerName, time);
      }
    }

    print('‚úÖ All notifications scheduled with adjusted times');

    // ‡¶∂‡ßá‡¶∑ ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt(_lastScheduleKey, DateTime.now().millisecondsSinceEpoch);
  }

  // ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡¶æ
  Future<void> _schedulePrayerNotification(
    String prayerName,
    String time,
  ) async {
    try {
      // ‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶∏‡ßá‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
      await AwesomeNotifications().cancel(prayerName.hashCode);

      final prayerDate = _parsePrayerTime(time);
      if (prayerDate == null) return;

      final notificationTime = prayerDate.subtract(const Duration(minutes: 5));
      final now = DateTime.now();

      // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
      if (notificationTime.isAfter(now)) {
        await _createNotification(prayerName, notificationTime);
      }
      // ‡¶Ü‡¶ó‡¶æ‡¶Æ‡ßÄ‡¶ï‡¶æ‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
      else {
        final tomorrowNotificationTime = notificationTime.add(
          const Duration(days: 1),
        );
        await _createNotification(prayerName, tomorrowNotificationTime);
      }

      print('‚úÖ Notification scheduled for $prayerName at $notificationTime');
    } catch (e) {
      print("Error scheduling notification for $prayerName: $e");
    }
  }

  // ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
  Future<void> _createNotification(
    String prayerName,
    DateTime scheduleTime,
  ) async {
    await AwesomeNotifications().createNotification(
      content: NotificationContent(
        id: prayerName.hashCode,
        channelKey: _channelKey,
        title: 'Prayer Times',
        body: '$prayerName - Azan starts in 5 minutes, Prepare for Prayer',
        notificationLayout: NotificationLayout.Default,
        wakeUpScreen: true,
        criticalAlert: true,
      ),
      schedule: NotificationCalendar(
        year: scheduleTime.year,
        month: scheduleTime.month,
        day: scheduleTime.day,
        hour: scheduleTime.hour,
        minute: scheduleTime.minute,
        second: 0,
        allowWhileIdle: true,
        preciseAlarm: true,
      ),
    );
  }

  // Adjusted prayer times ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
  Map<String, String> _getAdjustedPrayerTimes(
    Map<String, String> prayerTimes,
    Map<String, int> adjustments,
  ) {
    final adjustedTimes = Map<String, String>.from(prayerTimes);

    for (final entry in adjustments.entries) {
      final prayerName = entry.key;
      final adjustment = entry.value;

      if (adjustedTimes.containsKey(prayerName) && adjustment != 0) {
        final originalTime = adjustedTimes[prayerName]!;
        final adjustedTime = _adjustPrayerTime(originalTime, adjustment);
        adjustedTimes[prayerName] = adjustedTime;
      }
    }

    return adjustedTimes;
  }

  // ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
  String _adjustPrayerTime(String time, int adjustmentMinutes) {
    try {
      final parts = time.split(':');
      if (parts.length != 2) return time;

      int hours = int.parse(parts[0]);
      int minutes = int.parse(parts[1]);

      minutes += adjustmentMinutes;

      while (minutes >= 60) {
        minutes -= 60;
        hours = (hours + 1) % 24;
      }

      while (minutes < 0) {
        minutes += 60;
        hours = (hours - 1) % 24;
        if (hours < 0) hours += 24;
      }

      return '${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}';
    } catch (e) {
      print('Error adjusting prayer time: $e');
      return time;
    }
  }

  // ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶æ
  DateTime? _parsePrayerTime(String time) {
    try {
      final now = DateTime.now();
      final parts = time.split(':');
      if (parts.length != 2) return null;

      final hour = int.parse(parts[0]);
      final minute = int.parse(parts[1]);

      return DateTime(now.year, now.month, now.day, hour, minute);
    } catch (e) {
      print('Error parsing prayer time: $e');
      return null;
    }
  }

  // Boot Complete ‡¶π‡¶≤‡ßá ‡¶∏‡¶¨ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∞‡¶ø‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡¶æ
  Future<void> _rescheduleAllNotificationsOnBoot() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final String? savedPrayerTimes = prefs.getString("prayerTimes");

      if (savedPrayerTimes != null) {
        final Map<String, String> prayerTimes = Map<String, String>.from(
          jsonDecode(savedPrayerTimes),
        );

        final Map<String, int> prayerTimeAdjustments = {
          "‡¶´‡¶ú‡¶∞": prefs.getInt('adjustment_fajr') ?? 0,
          "‡¶Ø‡ßã‡¶π‡¶∞": prefs.getInt('adjustment_dhuhr') ?? 0,
          "‡¶Ü‡¶∏‡¶∞": prefs.getInt('adjustment_asr') ?? 0,
          "‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨": prefs.getInt('adjustment_maghrib') ?? 0,
          "‡¶á‡¶∂‡¶æ": prefs.getInt('adjustment_isha') ?? 0,
        };

        await scheduleAllPrayerNotifications(
          prayerTimes,
          prayerTimeAdjustments,
        );
        print('‚úÖ All notifications rescheduled after boot');
      }
    } catch (e) {
      print('Error rescheduling notifications on boot: $e');
    }
  }

  // ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶™‡¶æ‡¶∞‡¶Æ‡¶ø‡¶∂‡¶® ‡¶ö‡ßá‡¶ï
  Future<bool> checkAndRequestNotificationPermission() async {
    bool isNotificationAllowed = await AwesomeNotifications()
        .isNotificationAllowed();

    if (!isNotificationAllowed) {
      isNotificationAllowed = await AwesomeNotifications()
          .requestPermissionToSendNotifications(
            channelKey: _channelKey,
            permissions: [
              NotificationPermission.Alert,
              NotificationPermission.Sound,
              NotificationPermission.Badge,
              NotificationPermission.Vibration,
              NotificationPermission.Light,
              NotificationPermission.CriticalAlert,
            ],
          );
    }

    return isNotificationAllowed;
  }

  // ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶π‡ßá‡¶≤‡¶• ‡¶ö‡ßá‡¶ï
  Future<void> checkNotificationSystemHealth() async {
    try {
      // ‡ßß. ‡¶™‡¶æ‡¶∞‡¶Æ‡¶ø‡¶∂‡¶® ‡¶ö‡ßá‡¶ï
      final isAllowed = await AwesomeNotifications().isNotificationAllowed();
      print('üîî Notification Permission: $isAllowed');

      // ‡ß®. ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤‡ßç‡¶° ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ö‡ßá‡¶ï
      final scheduledNotifications = await AwesomeNotifications()
          .listScheduledNotifications();
      print(
        'üìã Currently scheduled notifications: ${scheduledNotifications.length}',
      );

      for (final notification in scheduledNotifications) {
        final content = notification.content;
        print(' - ${content?.title} (ID: ${content?.id})');
      }

      // ‡ß©. ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï
      await _checkChannelStatus();
    } catch (e) {
      print('‚ùå Notification system health check failed: $e');
    }
  }

  // ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï
  Future<void> _checkChannelStatus() async {
    try {
      final scheduledNotifications = await AwesomeNotifications()
          .listScheduledNotifications();

      if (scheduledNotifications.isNotEmpty) {
        print('üì° Notification channel is working properly');
      } else {
        print(
          '‚ö†Ô∏è No scheduled notifications found - channel might have issues',
        );
      }
    } catch (e) {
      print('‚ùå Error checking channel status: $e');
    }
  }

  // ‡¶∏‡¶¨ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶∏‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ
  Future<void> cancelAllNotifications() async {
    await AwesomeNotifications().cancelAll();
    print('üóëÔ∏è All notifications cancelled');
  }

  // ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡¶∏‡ßá‡¶≤ ‡¶ï‡¶∞‡¶æ
  Future<void> cancelPrayerNotification(String prayerName) async {
    await AwesomeNotifications().cancel(prayerName.hashCode);
    print('üóëÔ∏è Notification cancelled for: $prayerName');
  }

  // ‡¶∂‡ßá‡¶∑ ‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ü‡¶æ‡¶á‡¶Æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
  Future<bool> shouldRescheduleNotifications() async {
    final prefs = await SharedPreferences.getInstance();
    final lastSchedule = prefs.getInt(_lastScheduleKey);

    if (lastSchedule == null) return true;
    if (lastSchedule == null) return true;

    final lastScheduleTime = DateTime.fromMillisecondsSinceEpoch(lastSchedule);
    final now = DateTime.now();

    // ‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶≤‡ßá ‡¶∞‡¶ø‡¶∂‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
    return now.difference(lastScheduleTime).inHours >= 24;
  }

  // Test notification (‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
  Future<void> sendTestNotification() async {
    await AwesomeNotifications().createNotification(
      content: NotificationContent(
        id: 9999,
        channelKey: _channelKey,
        title: 'Test Notification',
        body: 'This is a test notification from Prayer Time App',
        notificationLayout: NotificationLayout.Default,
      ),
    );
    print('‚úÖ Test notification sent');
  }

  // Notification body based on language
  String getNotificationBody(bool isEnglish) {
    return isEnglish
        ? 'Azan starts in 5 minutes, Prepare for Prayer'
        : '‡¶Ü‡¶Ø‡¶æ‡¶® ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶¨‡¶æ‡¶ï‡¶ø, ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡¶ø ‡¶®‡¶ø‡¶®';
  }

  // Prayer name based on language
  String getPrayerName(String prayerName, bool isEnglish) {
    if (isEnglish) {
      switch (prayerName) {
        case '‡¶´‡¶ú‡¶∞':
          return 'Fajr';
        case '‡¶Ø‡ßã‡¶π‡¶∞':
          return 'Dhuhr';
        case '‡¶Ü‡¶∏‡¶∞':
          return 'Asr';
        case '‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨':
          return 'Maghrib';
        case '‡¶á‡¶∂‡¶æ':
          return 'Isha';
        default:
          return prayerName;
      }
    }
    return prayerName;
  }
}
