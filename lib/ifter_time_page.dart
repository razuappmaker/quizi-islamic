// lib/pages/ifter_time_page.dart
import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:provider/provider.dart';
import '../providers/theme_provider.dart';
import 'ad_helper.dart'; // AdHelper ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®

class IfterTimePage extends StatefulWidget {
  const IfterTimePage({Key? key}) : super(key: key);

  @override
  State<IfterTimePage> createState() => _IfterTimePageState();
}

class _IfterTimePageState extends State<IfterTimePage>
    with SingleTickerProviderStateMixin {
  // ---------- Prayer Times from SharedPreferences ----------
  String? cityName = "Loading...";
  String? countryName = "Loading...";
  Map<String, String> prayerTimes = {};
  Duration iftarCountdown = Duration.zero;
  Timer? iftarTimer;

  // ---------- New variables for time adjustment ----------
  int iftarTimeAdjustment = 0; // ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü
  bool _showAdjustmentDialog = false;

  // Animation controller for countdown pulse effect
  late AnimationController _animationController;
  late Animation<double> _animation;

  // ---------- Ads ----------
  BannerAd? _bannerAd; // ‚úÖ Nullable ‡¶ï‡¶∞‡ßÅ‡¶® adaptive banner-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
  bool _isBannerAdReady = false;
  Timer? _interstitialTimer; // Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßá‡¶∞ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞
  bool _interstitialAdShownToday =
      false; // ‡¶Ü‡¶ú‡¶ï‡ßá interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
  bool _showInterstitialAds =
      true; // interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‡¶ï‡¶ø‡¶®‡¶æ (‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá)

  // ---------- Hadith List ----------
  final List<String> _ramadanHadiths = [
    "‡¶∞‡¶Æ‡¶Ø‡¶æ‡¶® ‡¶Æ‡¶æ‡¶∏, ‡¶è‡¶§‡ßá ‡¶®‡¶æ‡¶Ø‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡ßÅ‡¶∞‡¶Ü‡¶®, ‡¶Ø‡¶æ ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶π‡¶ø‡¶¶‡¶æ‡ßü‡¶æ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßé‡¶™‡¶•‡ßá‡¶∞ ‡¶¶‡¶ø‡¶ï-‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ ‡¶ì ‡¶∏‡¶§‡ßç‡¶Ø‡¶æ‡¶∏‡¶§‡ßç‡¶Ø‡ßá‡¶∞ ‡¶™‡¶æ‡¶∞‡ßç‡¶•‡¶ï‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡ßÄ‡•§ ‡¶∏‡ßÇ‡¶∞‡¶æ ‡¶Ü‡¶≤-‡¶¨‡¶æ‡¶ï‡¶æ‡¶∞‡¶æ‡¶π ‡ß®:‡ßß‡ßÆ‡ß´",
    "‡¶π‡ßá ‡¶à‡¶Æ‡¶æ‡¶®‡¶¶‡¶æ‡¶∞‡¶ó‡¶£! ‡¶§‡ßã‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶∞‡ßã‡¶Ø‡¶æ ‡¶´‡¶∞‡¶Ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶Ø‡ßá‡¶Æ‡¶® ‡¶´‡¶∞‡¶Ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡¶ø‡¶≤ ‡¶§‡ßã‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡¶¨‡¶∞‡ßç‡¶§‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶â‡¶™‡¶∞, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶§‡ßã‡¶Æ‡¶∞‡¶æ ‡¶Æ‡ßÅ‡¶§‡ßç‡¶§‡¶æ‡¶ï‡ßÄ ‡¶π‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡•§ ‡¶∏‡ßÇ‡¶∞‡¶æ ‡¶Ü‡¶≤-‡¶¨‡¶æ‡¶ï‡¶æ‡¶∞‡¶æ‡¶π ‡ß®:‡ßß‡ßÆ‡ß©",
    "‡¶Ü‡¶∞ ‡¶Ø‡ßá ‡¶ï‡ßá‡¶â ‡¶Ö‡¶∏‡ßÅ‡¶∏‡ßç‡¶• ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∏‡¶´‡¶∞‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶∏‡ßá ‡¶Ø‡ßá‡¶® ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶¶‡¶ø‡¶®‡ßá ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶∞‡ßá‡•§ ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π ‡¶§‡ßã‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶π‡¶ú ‡¶ö‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶§‡ßã‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶†‡ßã‡¶∞‡¶§‡¶æ ‡¶ö‡¶æ‡¶® ‡¶®‡¶æ‡•§ ‡¶∏‡ßÇ‡¶∞‡¶æ ‡¶Ü‡¶≤-‡¶¨‡¶æ‡¶ï‡¶æ‡¶∞‡¶æ‡¶π ‡ß®:‡ßß‡ßÆ‡ß´",
    "‡¶Ø‡¶ñ‡¶® ‡¶∞‡¶Æ‡¶ú‡¶æ‡¶® ‡¶Æ‡¶æ‡¶∏ ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡ßá, ‡¶ú‡¶æ‡¶®‡ßç‡¶®‡¶æ‡¶§‡ßá‡¶∞ ‡¶¶‡¶∞‡¶ú‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ñ‡ßÅ‡¶≤‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü, ‡¶ú‡¶æ‡¶π‡¶æ‡¶®‡ßç‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶¶‡¶∞‡¶ú‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßü‡¶§‡¶æ‡¶®‡¶¶‡ßá‡¶∞ ‡¶∂‡¶ø‡¶ï‡¶≤‡¶¨‡¶¶‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§ ‡¶∏‡¶π‡¶ø‡¶π ‡¶¨‡ßÅ‡¶ñ‡¶æ‡¶∞‡¶ø, ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏: ‡ßß‡ßÆ‡ßØ‡ßØ; ‡¶∏‡¶π‡¶ø‡¶π ‡¶Æ‡ßÅ‡¶∏‡¶≤‡¶ø‡¶Æ, ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏: ‡ßß‡ß¶‡ß≠‡ßØ",
    "‡¶∞‡¶Æ‡¶ú‡¶æ‡¶® ‡¶π‡¶≤‡ßã ‡¶ß‡ßà‡¶∞‡ßç‡¶Ø‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶∏, ‡¶Ü‡¶∞ ‡¶ß‡ßà‡¶∞‡ßç‡¶Ø‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶æ‡¶® ‡¶π‡¶≤‡ßã ‡¶ú‡¶æ‡¶®‡ßç‡¶®‡¶æ‡¶§‡•§ ‡¶∏‡ßÅ‡¶®‡¶æ‡¶® ‡¶á‡¶¨‡¶®‡ßá ‡¶ñ‡ßÅ‡¶Ø‡¶æ‡¶á‡¶Æ‡¶æ‡¶π, ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏: ‡ßß‡ßÆ‡ßÆ‡ß≠",
    "‡¶§‡ßã‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø ‡¶è ‡¶Æ‡¶æ‡¶∏ (‡¶∞‡¶Æ‡¶ú‡¶æ‡¶®) ‡¶™‡¶æ‡¶¨‡ßá, ‡¶∏‡ßá ‡¶Ø‡ßá‡¶® ‡¶è ‡¶Æ‡¶æ‡¶∏‡ßá ‡¶∞‡ßã‡¶Ø‡¶æ ‡¶∞‡¶æ‡¶ñ‡ßá‡•§‡¶∏‡ßÇ‡¶∞‡¶æ ‡¶Ü‡¶≤-‡¶¨‡¶æ‡¶ï‡¶æ‡¶∞‡¶æ‡¶π ‡ß®:‡ßß‡ßÆ‡ß´",
    "‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø ‡¶à‡¶Æ‡¶æ‡¶® ‡¶ì ‡¶∏‡¶ì‡ßü‡¶æ‡¶¨‡ßá‡¶∞ ‡¶Ü‡¶∂‡¶æ‡ßü ‡¶∞‡¶Æ‡¶ú‡¶æ‡¶®‡ßá‡¶∞ ‡¶∞‡ßã‡¶Ø‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá, ‡¶§‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶ï‡¶æ‡¶∞ ‡¶ó‡ßÅ‡¶®‡¶æ‡¶π ‡¶Æ‡¶æ‡¶´ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá‡•§ ‡¶∏‡¶π‡¶ø‡¶π ‡¶¨‡ßÅ‡¶ñ‡¶æ‡¶∞‡¶ø, ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏: ‡ß©‡ßÆ; ‡¶∏‡¶π‡¶ø‡¶π ‡¶Æ‡ßÅ‡¶∏‡¶≤‡¶ø‡¶Æ, ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏: ‡ß≠‡ß¨‡ß¶",
  ];

  String _currentHadith = "";

  @override
  void initState() {
    super.initState();
    _loadAd(); // ‚úÖ Adaptive banner load
    _loadSavedData();
    _selectRandomHadith();
    _initializeAds(); // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®
    _loadAdjustmentSettings(); // üîπ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶•‡¶° ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®

    // Initialize animation controller
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 1),
    )..repeat(reverse: true);

    _animation = Tween<double>(begin: 0.97, end: 1.0).animate(
      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
    );
  }

  @override
  void dispose() {
    iftarTimer?.cancel();
    _interstitialTimer?.cancel(); // interstitial ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
    _bannerAd?.dispose(); // ‚úÖ Null safety ‡¶∏‡¶π dispose
    _animationController.dispose();
    super.dispose();
  }

  // üîπ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶•‡¶°: ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
  Future<void> _loadAdjustmentSettings() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      iftarTimeAdjustment = prefs.getInt('ifter_time_adjustment') ?? 0;
    });
    print(
      'üïí ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: $iftarTimeAdjustment ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü',
    );
  }

  // üîπ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶•‡¶°: ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®
  Future<void> _saveAdjustmentSettings(int adjustment) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('ifter_time_adjustment', adjustment);
    setState(() {
      iftarTimeAdjustment = adjustment;
    });

    // ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶°‡¶æ‡¶â‡¶® ‡¶∞‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
    if (prayerTimes.isNotEmpty) {
      _calculateIftarCountdown();
    }

    print('üíæ ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: $adjustment ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü');
  }

  // üîπ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶•‡¶°: ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶≤‡¶ó ‡¶∂‡ßã ‡¶ï‡¶∞‡ßÅ‡¶®
  void _showTimeAdjustmentDialog() {
    setState(() {
      _showAdjustmentDialog = true;
    });

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Row(
                children: [
                  Icon(Icons.schedule, color: Colors.green),
                  SizedBox(width: 8),
                  Text("‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø ‡¶ï‡¶∞‡ßÅ‡¶®"),
                ],
              ),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    "‡¶á‡¶´‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø ‡¶ï‡¶∞‡ßÅ‡¶® (+/- ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü)",
                    style: TextStyle(fontSize: 14),
                    textAlign: TextAlign.center,
                  ),
                  SizedBox(height: 20),

                  // Adjustment display
                  Container(
                    padding: EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey[100],
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: Column(
                      children: [
                        Text(
                          "‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü",
                          style: TextStyle(fontSize: 12, color: Colors.grey),
                        ),
                        SizedBox(height: 5),
                        Text(
                          "${iftarTimeAdjustment >= 0 ? '+' : ''}$iftarTimeAdjustment ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü",
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: iftarTimeAdjustment == 0
                                ? Colors.grey
                                : iftarTimeAdjustment > 0
                                ? Colors.green
                                : Colors.red,
                          ),
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: 20),

                  // Adjustment buttons
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      // Decrease button
                      ElevatedButton(
                        onPressed: () {
                          setState(() {
                            iftarTimeAdjustment -= 1;
                          });
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.red,
                          shape: CircleBorder(),
                          padding: EdgeInsets.all(16),
                        ),
                        child: Icon(Icons.remove, color: Colors.white),
                      ),

                      // Reset button
                      ElevatedButton(
                        onPressed: () {
                          setState(() {
                            iftarTimeAdjustment = 0;
                          });
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.orange,
                          shape: CircleBorder(),
                          padding: EdgeInsets.all(16),
                        ),
                        child: Icon(Icons.refresh, color: Colors.white),
                      ),

                      // Increase button
                      ElevatedButton(
                        onPressed: () {
                          setState(() {
                            iftarTimeAdjustment += 1;
                          });
                        },
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.green,
                          shape: CircleBorder(),
                          padding: EdgeInsets.all(16),
                        ),
                        child: Icon(Icons.add, color: Colors.white),
                      ),
                    ],
                  ),
                  SizedBox(height: 10),

                  // Quick adjustment buttons
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      TextButton(
                        onPressed: () {
                          setState(() {
                            iftarTimeAdjustment -= 5;
                          });
                        },
                        child: Text(
                          "-‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü",
                          style: TextStyle(color: Colors.red),
                        ),
                      ),
                      TextButton(
                        onPressed: () {
                          setState(() {
                            iftarTimeAdjustment += 5;
                          });
                        },
                        child: Text(
                          "+‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü",
                          style: TextStyle(color: Colors.green),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                    setState(() {
                      _showAdjustmentDialog = false;
                    });
                  },
                  child: Text("‡¶¨‡¶æ‡¶§‡¶ø‡¶≤"),
                ),
                ElevatedButton(
                  onPressed: () {
                    _saveAdjustmentSettings(iftarTimeAdjustment);
                    Navigator.of(context).pop();
                    setState(() {
                      _showAdjustmentDialog = false;
                    });

                    // ‡¶∏‡ßç‡¶®‡ßç‡¶Ø‡¶æ‡¶ï‡¶¨‡¶æ‡¶∞‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text(
                          iftarTimeAdjustment == 0
                              ? "‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá"
                              : "‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ${iftarTimeAdjustment >= 0 ? '+' : ''}$iftarTimeAdjustment ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
                        ),
                        duration: Duration(seconds: 2),
                        backgroundColor: iftarTimeAdjustment == 0
                            ? Colors.orange
                            : Colors.green,
                      ),
                    );
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                  ),
                  child: Text("‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®"),
                ),
              ],
            );
          },
        );
      },
    ).then((value) {
      setState(() {
        _showAdjustmentDialog = false;
      });
    });
  }

  // üîπ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶•‡¶°: ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
  String _adjustIftarTime(String time, int adjustmentMinutes) {
    try {
      final parts = time.split(':');
      if (parts.length != 2) return time;

      int hours = int.parse(parts[0]);
      int minutes = int.parse(parts[1]);

      // ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
      minutes += adjustmentMinutes;

      // ‡¶ò‡¶£‡ßç‡¶ü‡¶æ ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø ‡¶ï‡¶∞‡¶æ
      while (minutes >= 60) {
        minutes -= 60;
        hours = (hours + 1) % 24;
      }

      while (minutes < 0) {
        minutes += 60;
        hours = (hours - 1) % 24;
        if (hours < 0) hours += 24;
      }

      final adjustedTime =
          '${hours.toString().padLeft(2, '0')}:${minutes.toString().padLeft(2, '0')}';

      return adjustedTime;
    } catch (e) {
      print('‚ùå ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
      return time;
    }
  }

  // üîπ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶•‡¶°: ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡ßç‡¶°‡¶ø‡¶ï‡ßá‡¶ü‡¶∞
  Widget _buildAdjustmentIndicator(bool isDarkMode) {
    if (iftarTimeAdjustment == 0) return SizedBox();

    return Container(
      margin: EdgeInsets.only(bottom: 8),
      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: iftarTimeAdjustment > 0
            ? Colors.green.withOpacity(0.2)
            : Colors.red.withOpacity(0.2),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(
          color: iftarTimeAdjustment > 0 ? Colors.green : Colors.red,
          width: 1,
        ),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            iftarTimeAdjustment > 0 ? Icons.arrow_upward : Icons.arrow_downward,
            size: 14,
            color: iftarTimeAdjustment > 0 ? Colors.green : Colors.red,
          ),
          SizedBox(width: 4),
          Text(
            "${iftarTimeAdjustment >= 0 ? '+' : ''}$iftarTimeAdjustment ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü",
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.bold,
              color: iftarTimeAdjustment > 0 ? Colors.green : Colors.red,
            ),
          ),
        ],
      ),
    );
  }

  // ‚úÖ Adaptive Banner Ad ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ - ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶™‡ßá‡¶á‡¶ú‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á
  Future<void> _loadAd() async {
    try {
      // ‚úÖ AdHelper ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá adaptive banner ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
      bool canShowAd = await AdHelper.canShowBannerAd();

      if (!canShowAd) {
        print('Banner ad limit reached, not showing ad');
        return;
      }

      _bannerAd = await AdHelper.createAdaptiveBannerAdWithFallback(
        context,
        listener: BannerAdListener(
          onAdLoaded: (Ad ad) {
            setState(() => _isBannerAdReady = true);
            AdHelper.recordBannerAdShown();
            print('Adaptive Banner ad loaded successfully.');
          },
          onAdFailedToLoad: (Ad ad, LoadAdError error) {
            print('Adaptive Banner ad failed to load: $error');
            ad.dispose();
            _isBannerAdReady = false;
          },
          onAdOpened: (Ad ad) {
            AdHelper.canClickAd().then((canClick) {
              if (canClick) {
                AdHelper.recordAdClick();
                print('Adaptive Banner ad clicked.');
              } else {
                print('Ad click limit reached');
              }
            });
          },
        ),
      );

      await _bannerAd?.load();
    } catch (e) {
      print('Error loading adaptive banner ad: $e');
      _isBannerAdReady = false;
    }
  }

  // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
  Future<void> _initializeAds() async {
    try {
      // AdMob SDK ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®
      await AdHelper.initialize();

      // ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
      final prefs = await SharedPreferences.getInstance();

      // interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü true)
      _showInterstitialAds = prefs.getBool('show_interstitial_ads') ?? true;

      // ‡¶Ü‡¶ú‡¶ï‡ßá interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
      final lastShownDate = prefs.getString('last_interstitial_date_ifter');
      final today = DateTime.now().toIso8601String().split('T')[0];

      setState(() {
        _interstitialAdShownToday = (lastShownDate == today);
      });

      // ‡ßß‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∂‡ßã ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
      _startInterstitialTimer();

      print(
        '‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡¶°: interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° = $_showInterstitialAds, ‡¶Ü‡¶ú‡¶ï‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá = $_interstitialAdShownToday',
      );
    } catch (e) {
      print('‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
    }
  }

  // Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
  void _startInterstitialTimer() {
    _interstitialTimer?.cancel(); // ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶Æ‡¶æ‡¶® ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®

    _interstitialTimer = Timer(Duration(seconds: 10), () {
      _showInterstitialAdIfNeeded();
    });

    print(
      '‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ü‡¶æ‡¶á‡¶Æ‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá (‡ßß‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶∂‡ßã ‡¶π‡¶¨‡ßá)',
    );
  }

  // Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∂‡ßã ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶Ø‡¶º
  Future<void> _showInterstitialAdIfNeeded() async {
    try {
      // interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®
      if (!_showInterstitialAds) {
        print('‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß ‡¶∞‡ßá‡¶ñ‡ßá‡¶õ‡ßá‡¶®');
        return;
      }

      // ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶ú‡¶ï‡ßá ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá ‡¶•‡¶æ‡¶ï‡ßá ‡¶§‡¶¨‡ßá ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®
      if (_interstitialAdShownToday) {
        print('‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ü‡¶ú interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
        return;
      }

      print('‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∂‡ßã ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');

      // AdHelper ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∂‡ßã ‡¶ï‡¶∞‡ßÅ‡¶®
      await AdHelper.showInterstitialAd(
        onAdShowed: () {
          print('‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∂‡ßã ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã');
          _recordInterstitialShown();
        },
        onAdDismissed: () {
          print('‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶°‡¶ø‡¶∏‡¶Æ‡¶ø‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã');
        },
        onAdFailedToShow: () {
          print('‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∂‡ßã ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•');
        },
        adContext: 'IfterTimePage',
      );
    } catch (e) {
      print('‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∂‡ßã ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
    }
  }

  // Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
  void _recordInterstitialShown() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final today = DateTime.now().toIso8601String().split('T')[0];

      await prefs.setString('last_interstitial_date_ifter', today);

      setState(() {
        _interstitialAdShownToday = true;
      });

      print(
        '‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã: $today',
      );
    } catch (e) {
      print('‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
    }
  }

  // interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶ü‡¶ó‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶™‡ßá‡¶ú ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®)
  Future<void> _toggleInterstitialAds(bool value) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('show_interstitial_ads', value);

    setState(() {
      _showInterstitialAds = value;
    });

    print('‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - Interstitial ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: $value');

    // ‡¶∏‡ßç‡¶®‡ßç‡¶Ø‡¶æ‡¶ï‡¶¨‡¶æ‡¶∞‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          value
              ? '‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá'
              : '‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
        ),
        duration: Duration(seconds: 2),
      ),
    );
  }

  // SharedPreferences ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
  Future<void> _loadSavedData() async {
    final prefs = await SharedPreferences.getInstance();

    setState(() {
      cityName = prefs.getString("cityName") ?? "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ";
      countryName = prefs.getString("countryName") ?? "‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ";

      // üîπ Priority 1: Adjusted prayer times (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
      String? savedAdjustedTimes = prefs.getString("adjusted_prayer_times");
      if (savedAdjustedTimes != null) {
        try {
          prayerTimes = Map<String, String>.from(
            jsonDecode(savedAdjustedTimes),
          );
          print('‚úÖ ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡ßá‡¶° ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá');

          // üîπ ‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç: ‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
          if (prayerTimes.containsKey("‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨")) {
            print('üïí ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡ßá‡¶° ‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨ ‡¶∏‡¶Æ‡¶Ø‡¶º: ${prayerTimes["‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨"]}');
          }
        } catch (e) {
          print('‚ùå ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡ßá‡¶° ‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
        }
      }

      // üîπ Priority 2: Original prayer times (‡¶Ø‡¶¶‡¶ø Adjusted ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá)
      if (prayerTimes.isEmpty) {
        String? savedOriginalTimes = prefs.getString("prayerTimes");
        if (savedOriginalTimes != null) {
          try {
            prayerTimes = Map<String, String>.from(
              jsonDecode(savedOriginalTimes),
            );
            print('‚ÑπÔ∏è ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - ‡¶Ö‡¶∞‡¶ø‡¶ú‡¶ø‡¶®‡¶æ‡¶≤ ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá');

            if (prayerTimes.containsKey("‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨")) {
              print('üïí ‡¶Ö‡¶∞‡¶ø‡¶ú‡¶ø‡¶®‡¶æ‡¶≤ ‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨ ‡¶∏‡¶Æ‡¶Ø‡¶º: ${prayerTimes["‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨"]}');
            }
          } catch (e) {
            print('‚ùå ‡¶Ö‡¶∞‡¶ø‡¶ú‡¶ø‡¶®‡¶æ‡¶≤ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
          }
        }
      }

      // üîπ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶∏ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶á‡¶®‡¶´‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
      String? savedAdjustments = prefs.getString('prayer_time_adjustments');
      if (savedAdjustments != null) {
        try {
          Map<String, dynamic> adjustments = Map<String, dynamic>.from(
            jsonDecode(savedAdjustments),
          );
          print('üìù ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶∏: $adjustments');

          // üîπ ‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
          if (adjustments.containsKey("‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨")) {
            print(
              'üéØ ‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü: ${adjustments["‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨"]} minutes',
            );
          }
        } catch (e) {
          print('‚ùå ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡¶∏ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
        }
      }

      if (prayerTimes.isNotEmpty) {
        _calculateIftarCountdown();
      } else {
        print('‚ö†Ô∏è ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶™‡ßá‡¶ú - ‡¶ï‡ßã‡¶® ‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø');
      }
    });
  }

  // ‡¶∞‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶®
  void _selectRandomHadith() {
    final random =
        DateTime.now().millisecondsSinceEpoch % _ramadanHadiths.length;
    setState(() {
      _currentHadith = _ramadanHadiths[random];
    });
  }

  // üîπ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Æ‡ßá‡¶•‡¶°: ‡¶á‡¶´‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶® (‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶π)
  void _calculateIftarCountdown() {
    if (prayerTimes.containsKey("‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨")) {
      String maghribTime = prayerTimes["‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨"]!;

      // üîπ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
      if (iftarTimeAdjustment != 0) {
        maghribTime = _adjustIftarTime(maghribTime, iftarTimeAdjustment);
        print(
          'üïí ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡ßá‡¶° ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º: $maghribTime ($iftarTimeAdjustment ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü)',
        );
      }

      final parts = maghribTime.split(":");
      final hour = int.parse(parts[0]);
      final minute = int.parse(parts[1]);

      final now = DateTime.now();
      DateTime maghribDateTime = DateTime(
        now.year,
        now.month,
        now.day,
        hour,
        minute,
      );

      if (maghribDateTime.isAfter(now)) {
        setState(() {
          iftarCountdown = maghribDateTime.difference(now);
        });

        iftarTimer?.cancel();
        iftarTimer = Timer.periodic(const Duration(seconds: 1), (_) {
          setState(() {
            iftarCountdown = maghribDateTime.difference(DateTime.now());
            if (iftarCountdown.isNegative) {
              _calculateIftarCountdown();
            }
          });
        });
      } else {
        final tomorrowMaghrib = maghribDateTime.add(const Duration(days: 1));
        setState(() {
          iftarCountdown = tomorrowMaghrib.difference(now);
        });

        iftarTimer?.cancel();
        iftarTimer = Timer.periodic(const Duration(seconds: 1), (_) {
          setState(() {
            iftarCountdown = tomorrowMaghrib.difference(DateTime.now());
          });
        });
      }
    }
  }

  // ‡¶∏‡ßá‡¶π‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶® (‡¶´‡¶ú‡¶∞‡ßá‡¶∞ ‡ß© ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ü‡¶ó‡ßá)
  String _calculateSehriTime() {
    if (prayerTimes.containsKey("‡¶´‡¶ú‡¶∞")) {
      final fajrTime = prayerTimes["‡¶´‡¶ú‡¶∞"]!;
      final parts = fajrTime.split(":");
      final hour = int.parse(parts[0]);
      final minute = int.parse(parts[1]);

      // ‡¶´‡¶ú‡¶∞‡ßá‡¶∞ ‡ß© ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ü‡¶ó‡ßá
      int sehriMinute = minute - 3;
      int sehriHour = hour;
      if (sehriMinute < 0) {
        sehriHour -= 1;
        sehriMinute += 60;
      }

      // Convert to 12-hour format
      final time = TimeOfDay(hour: sehriHour, minute: sehriMinute);
      return "${time.hourOfPeriod}:${time.minute.toString().padLeft(2, '0')} ${time.period == DayPeriod.am ? 'AM' : 'PM'}";
    }
    return "--:--";
  }

  // üîπ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶Æ‡ßá‡¶•‡¶°: ‡¶á‡¶´‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶π)
  String _getIftarTime() {
    if (prayerTimes.containsKey("‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨")) {
      String maghribTime = prayerTimes["‡¶Æ‡¶æ‡¶ó‡¶∞‡¶ø‡¶¨"]!;

      // üîπ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
      if (iftarTimeAdjustment != 0) {
        maghribTime = _adjustIftarTime(maghribTime, iftarTimeAdjustment);
      }

      final parts = maghribTime.split(":");
      final hour = int.parse(parts[0]);
      final minute = int.parse(parts[1]);

      final time = TimeOfDay(hour: hour, minute: minute);
      return "${time.hourOfPeriod}:${time.minute.toString().padLeft(2, '0')} ${time.period == DayPeriod.am ? 'AM' : 'PM'}";
    }
    return "--:--";
  }

  // ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡ßá‡¶∏ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶®
  double _calculateProgress(Duration remainingTime) {
    // Assuming iftar is at sunset (adjust according to your logic)
    // This calculates progress based on remaining time (0 = time's up, 1 = full time remaining)
    const totalDaylightHours = 12; // Adjust based on your calculation
    final totalSeconds = totalDaylightHours * 3600;
    final remainingSeconds = remainingTime.inSeconds;

    return remainingSeconds / totalSeconds;
  }

  // ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶°‡¶æ‡¶â‡¶® ‡¶ï‡¶æ‡¶≤‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£
  Color _getCountdownColor(Duration remainingTime) {
    final hours = remainingTime.inHours;
    final minutes = remainingTime.inMinutes % 60;

    if (hours > 1) {
      return Colors.greenAccent; // Plenty of time - green
    } else if (hours == 1) {
      return Colors.orangeAccent; // Getting close - orange
    } else if (minutes > 30) {
      return Colors.orange; // Less than an hour - dark orange
    } else if (minutes > 10) {
      return Colors.deepOrange; // Less than 30 minutes - red-orange
    } else {
      return Colors.redAccent; // Very close - red
    }
  }

  // ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡ßá‡¶∏ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü
  String _getProgressText(Duration remainingTime) {
    final hours = remainingTime.inHours;
    final minutes = remainingTime.inMinutes % 60;

    if (hours > 1) {
      return "‡¶á‡¶´‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ü‡¶∏‡¶õ‡ßá";
    } else if (hours == 1) {
      return "‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§ ‡¶π‡ßã‡¶®";
    } else if (minutes > 30) {
      return "‡¶Ö‡¶≤‡ßç‡¶™ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¨‡¶æ‡¶ï‡¶ø";
    } else if (minutes > 10) {
      return "‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶á‡¶´‡¶§‡¶æ‡¶∞";
    } else {
      return "‡¶á‡¶´‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø";
    }
  }

  // ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶á‡¶â‡¶®‡¶ø‡¶ü ‡¶¨‡¶ø‡¶≤‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶° - ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
  Widget _buildTimeUnit(String label, int value, bool isDarkMode, Color color) {
    return Column(
      children: [
        Container(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: color.withOpacity(0.5), width: 1),
          ),
          child: Text(
            value.toString().padLeft(2, '0'),
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w700,
              color: color,
            ),
          ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: TextStyle(fontSize: 12, color: Colors.white.withOpacity(0.8)),
        ),
      ],
    );
  }

  // ‡¶ï‡ßã‡¶≤‡¶® ‡¶∏‡ßá‡¶™‡¶æ‡¶∞‡ßá‡¶ü‡¶∞ - ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
  Widget _buildColon(Color color) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Text(
        ":",
        style: TextStyle(
          fontSize: 20,
          fontWeight: FontWeight.bold,
          color: color,
        ),
      ),
    );
  }

  // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶á‡¶®‡ßç‡¶°‡¶ø‡¶ï‡ßá‡¶ü‡¶∞ (‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç/‡¶á‡¶®‡¶´‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
  Widget _buildAdStatusIndicator(bool isDarkMode) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: _interstitialAdShownToday ? Colors.green : Colors.orange,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            _interstitialAdShownToday ? Icons.check : Icons.schedule,
            size: 12,
            color: Colors.white,
          ),
          SizedBox(width: 4),
          Text(
            _interstitialAdShownToday
                ? "‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá"
                : "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§",
            style: TextStyle(fontSize: 10, color: Colors.white),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final themeProvider = Provider.of<ThemeProvider>(context);
    final isDarkMode = themeProvider.isDarkMode;
    final primaryColor = Colors.green;
    final backgroundColor = isDarkMode ? Colors.grey[900] : Colors.grey[50];

    return Scaffold(
      backgroundColor: backgroundColor,
      appBar: AppBar(
        backgroundColor: primaryColor,
        centerTitle: true,
        title: const Text(
          "‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶ì ‡¶∏‡ßá‡¶π‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º",
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 17,
            color: Colors.white,
          ),
        ),
        // üîπ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç ‡¶Ü‡¶á‡¶ï‡¶® ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
        actions: [
          IconButton(
            icon: Icon(Icons.settings, color: Colors.white),
            onPressed: _showTimeAdjustmentDialog,
            tooltip: "‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡¶æ‡¶Æ‡¶û‡ßç‡¶ú‡¶∏‡ßç‡¶Ø ‡¶ï‡¶∞‡ßÅ‡¶®",
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            // ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡¶•‡ßç‡¶Ø
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: isDarkMode ? Colors.green[900] : Colors.green[100],
                borderRadius: BorderRadius.circular(12),
              ),
              child: Row(
                children: [
                  Icon(
                    Icons.location_on,
                    color: isDarkMode ? Colors.green[300] : Colors.green[700],
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          "$cityName, $countryName",
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                            color: isDarkMode ? Colors.white : Colors.black87,
                          ),
                        ),
                        // üîπ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶®‡ßç‡¶°‡¶ø‡¶ï‡ßá‡¶ü‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
                        _buildAdjustmentIndicator(isDarkMode),
                      ],
                    ),
                  ),
                  IconButton(
                    icon: Icon(
                      Icons.refresh,
                      color: isDarkMode ? Colors.green[300] : Colors.green[700],
                    ),
                    onPressed: _loadSavedData,
                    tooltip: "‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®",
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶°‡¶æ‡¶â‡¶® ‡¶∏‡ßá‡¶ï‡¶∂‡¶® - ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
            Container(
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: isDarkMode
                      ? [Colors.green[900]!, Colors.green[700]!]
                      : [Colors.green[600]!, Colors.green[400]!],
                ),
                borderRadius: BorderRadius.circular(20),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.3),
                    blurRadius: 12,
                    offset: const Offset(0, 6),
                  ),
                ],
              ),
              child: Column(
                children: [
                  // Header with icon and adjustment info
                  Column(
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(
                            Icons.nightlight_round,
                            color: Colors.white.withOpacity(0.9),
                            size: 22,
                          ),
                          const SizedBox(width: 8),
                          Text(
                            "‡¶á‡¶´‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¨‡¶æ‡¶ï‡¶ø",
                            style: TextStyle(
                              fontSize: 20,
                              fontWeight: FontWeight.w700,
                              color: Colors.white,
                              letterSpacing: 0.5,
                            ),
                          ),
                        ],
                      ),
                      // üîπ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡¶•‡ßç‡¶Ø
                      if (iftarTimeAdjustment != 0) ...[
                        SizedBox(height: 8),
                        Text(
                          "(${iftarTimeAdjustment >= 0 ? '+' : ''}$iftarTimeAdjustment ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶ú‡¶æ‡¶∏‡ßç‡¶ü‡ßá‡¶°)",
                          style: TextStyle(
                            fontSize: 12,
                            color: Colors.white.withOpacity(0.8),
                            fontStyle: FontStyle.italic,
                          ),
                        ),
                      ],
                    ],
                  ),
                  const SizedBox(height: 24),

                  // Countdown timer with circular progress border
                  Stack(
                    alignment: Alignment.center,
                    children: [
                      // Circular progress background
                      Container(
                        width: 200,
                        height: 200,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          color: Colors.white.withOpacity(0.1),
                        ),
                      ),

                      // Animated circular progress border
                      SizedBox(
                        width: 200,
                        height: 200,
                        child: TweenAnimationBuilder(
                          duration: const Duration(seconds: 1),
                          tween: Tween<double>(begin: 0.0, end: 1.0),
                          builder: (context, double value, child) {
                            return CircularProgressIndicator(
                              value: _calculateProgress(iftarCountdown),
                              strokeWidth: 6,
                              backgroundColor: Colors.white.withOpacity(0.2),
                              valueColor: AlwaysStoppedAnimation<Color>(
                                _getCountdownColor(iftarCountdown),
                              ),
                            );
                          },
                        ),
                      ),

                      // Countdown content
                      Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          // Main countdown numbers
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              _buildTimeUnit(
                                "‡¶ò‡¶£‡ßç‡¶ü‡¶æ",
                                iftarCountdown.inHours,
                                isDarkMode,
                                _getCountdownColor(iftarCountdown),
                              ),
                              const SizedBox(width: 8),
                              _buildColon(_getCountdownColor(iftarCountdown)),
                              const SizedBox(width: 8),
                              _buildTimeUnit(
                                "‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü",
                                iftarCountdown.inMinutes % 60,
                                isDarkMode,
                                _getCountdownColor(iftarCountdown),
                              ),
                              const SizedBox(width: 8),
                              _buildColon(_getCountdownColor(iftarCountdown)),
                              const SizedBox(width: 8),
                              _buildTimeUnit(
                                "‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°",
                                iftarCountdown.inSeconds % 60,
                                isDarkMode,
                                _getCountdownColor(iftarCountdown),
                              ),
                            ],
                          ),
                          const SizedBox(height: 8),

                          // Progress text
                          Text(
                            _getProgressText(iftarCountdown),
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.white.withOpacity(0.8),
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),

                  const SizedBox(height: 24),

                  // Iftar time with improved styling
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 16,
                      vertical: 12,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.15),
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(
                        color: Colors.white.withOpacity(0.3),
                        width: 1,
                      ),
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(
                          Icons.access_time,
                          color: Colors.white.withOpacity(0.9),
                          size: 18,
                        ),
                        const SizedBox(width: 8),
                        Text(
                          "‡¶á‡¶´‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º: ${_getIftarTime()}",
                          style: TextStyle(
                            fontSize: 16,
                            color: Colors.white,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏ ‡¶∏‡ßá‡¶ï‡¶∂‡¶®
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: isDarkMode ? Colors.blue[900] : Colors.blue[50],
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: isDarkMode ? Colors.blue[700]! : Colors.blue[200]!,
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(
                        Icons.lightbulb_outline,
                        color: isDarkMode ? Colors.blue[200] : Colors.blue[700],
                      ),
                      const SizedBox(width: 8),
                      Text(
                        "‡¶∞‡¶Æ‡¶ú‡¶æ‡¶®‡ßá‡¶∞ ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏",
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: isDarkMode ? Colors.white : Colors.black87,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 12),
                  Text(
                    _currentHadith,
                    style: TextStyle(
                      fontSize: 14,
                      color: isDarkMode ? Colors.grey[300] : Colors.grey[700],
                      fontStyle: FontStyle.italic,
                    ),
                    textAlign: TextAlign.justify,
                  ),
                  const SizedBox(height: 8),
                  Align(
                    alignment: Alignment.centerRight,
                    child: TextButton(
                      onPressed: _selectRandomHadith,
                      child: Text(
                        "‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶π‡¶æ‡¶¶‡¶ø‡¶∏",
                        style: TextStyle(
                          color: isDarkMode
                              ? Colors.blue[200]
                              : Colors.blue[700],
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // ‡¶∏‡ßá‡¶π‡¶∞‡¶ø ‡¶ì ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶∏‡ßá‡¶ï‡¶∂‡¶®
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: isDarkMode ? Colors.grey[800] : Colors.white,
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 4,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Row(
                children: [
                  // ‡¶∏‡ßá‡¶π‡¶∞‡¶ø‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º
                  Expanded(
                    child: Column(
                      children: [
                        Icon(
                          Icons.nights_stay,
                          size: 32,
                          color: isDarkMode
                              ? Colors.orange[300]
                              : Colors.orange[700],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          "‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶∏‡¶æ‡¶π‡¶∞‡¶ø‡¶∞ ‡¶∂‡ßá‡¶∑",
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                            color: isDarkMode ? Colors.white : Colors.black87,
                          ),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 4),
                        Text(
                          _calculateSehriTime(),
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: isDarkMode
                                ? Colors.orange[300]
                                : Colors.orange[700],
                          ),
                        ),
                      ],
                    ),
                  ),

                  // ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶°‡¶æ‡¶∞
                  Container(
                    width: 1,
                    height: 80,
                    color: isDarkMode ? Colors.grey[600] : Colors.grey[300],
                    margin: const EdgeInsets.symmetric(horizontal: 16),
                  ),

                  // ‡¶á‡¶´‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º
                  Expanded(
                    child: Column(
                      children: [
                        Icon(
                          Icons.wb_sunny,
                          size: 32,
                          color: isDarkMode
                              ? Colors.green[300]
                              : Colors.green[700],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          "‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶á‡¶´‡¶§‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ",
                          style: TextStyle(
                            fontSize: 14,
                            fontWeight: FontWeight.w600,
                            color: isDarkMode ? Colors.white : Colors.black87,
                          ),
                          textAlign: TextAlign.center,
                        ),
                        const SizedBox(height: 4),
                        Text(
                          _getIftarTime(),
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: isDarkMode
                                ? Colors.green[300]
                                : Colors.green[700],
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),

            // ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡ßá‡¶ï‡¶∂‡¶®
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: isDarkMode ? Colors.grey[800] : Colors.white,
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    "üí° ‡¶§‡¶•‡ßç‡¶Ø",
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: isDarkMode ? Colors.white : Colors.black87,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    "‚Ä¢ üçΩÔ∏è ‡¶á‡¶´‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¶‡ßã‡ßü‡¶æ- ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π‡ßÅ‡¶Æ‡ßç‡¶Æ‡¶æ ‡¶á‡¶®‡ßç‡¶®‡¶ø ‡¶≤‡¶æ‡¶ï‡¶æ ‡¶∏‡ßÅ‡¶Æ‡¶§‡ßÅ, ‡¶ì‡ßü‡¶æ ‡¶¨‡¶ø‡¶ï‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶®‡¶§‡ßÅ, ‡¶ì‡ßü‡¶æ '‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡¶æ ‡¶§‡¶æ‡¶ì‡ßü‡¶æ‡¶ï‡ßç‡¶ï‡¶æ‡¶≤‡¶§‡ßÅ, ‡¶ì‡ßü‡¶æ '‡¶Ü‡¶≤‡¶æ ‡¶∞‡¶ø‡¶ú‡¶ï‡¶ø‡¶ï‡¶æ ‡¶Ü‡¶´‡¶§‡¶æ‡¶∞‡¶§‡ßÅ‡•§\n"
                    "‚Ä¢ üëâ ‡¶∞‡¶æ‡¶∏‡ßÇ‡¶≤ Ô∑∫ ‡¶¨‡¶≤‡ßá‡¶õ‡ßá‡¶®- ‡¶∞‡ßã‡¶ú‡¶æ ‡¶∞‡¶æ‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶æ‡¶π‡ßç‚Äå‡¶∞‡¶ø ‡¶ñ‡¶æ‡¶ì; ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶Ø‡¶º‡¶á ‡¶∏‡¶æ‡¶π‡¶∞‡¶ø‡¶§‡ßá ‡¶¨‡¶∞‡¶ï‡¶§ ‡¶Ü‡¶õ‡ßá‡•§ (‡¶∏‡¶π‡¶ø‡¶π ‡¶¨‡ßÅ‡¶ñ‡¶æ‡¶∞‡¶ø 1923, ‡¶∏‡¶π‡¶ø‡¶π ‡¶Æ‡ßÅ‡¶∏‡¶≤‡¶ø‡¶Æ 1095)\n"
                    "‚Ä¢ üëâ ‡¶∞‡ßã‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶¶‡¶¨ ‡¶π‡¶≤‡ßã‚Äî ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞-‡¶™‡¶æ‡¶®‡¶æ‡¶π‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶ø‡¶∞‡¶§ ‡¶•‡¶æ‡¶ï‡¶æ ‡¶®‡ßü, ‡¶¨‡¶∞‡¶Ç ‡¶ö‡ßã‡¶ñ, ‡¶ï‡¶æ‡¶®, ‡¶ú‡¶ø‡¶π‡ßç‡¶¨‡¶æ ‡¶ì ‡¶∏‡¶¨ ‡¶Ö‡¶ô‡ßç‡¶ó-‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶ô‡ßç‡¶ó‡¶ï‡ßá ‡¶™‡¶æ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Ç‡¶Ø‡¶§ ‡¶∞‡¶æ‡¶ñ‡¶æ‡•§\n",
                    style: TextStyle(
                      fontSize: 14,
                      color: isDarkMode ? Colors.grey[300] : Colors.grey[700],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),

      // ‚úÖ Adaptive Banner Ad - ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶™‡ßá‡¶á‡¶ú‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á
      bottomNavigationBar: _isBannerAdReady && _bannerAd != null
          ? SafeArea(
              top: false,
              child: Container(
                width: double.infinity,
                height: _bannerAd!.size.height.toDouble(),
                alignment: Alignment.center,
                color: Theme.of(context).brightness == Brightness.dark
                    ? Colors.grey[900]
                    : Colors.white,
                child: AdWidget(ad: _bannerAd!),
              ),
            )
          : // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶®‡ßç‡¶Ø‡¶æ‡¶≠‡¶ø‡¶ó‡ßá‡¶∂‡¶® ‡¶¨‡¶æ‡¶∞ ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®
            SafeArea(child: Container(height: 0)),
    );
  }
}
