// Admin Recherche screen

import 'package:flutter/material.dart';
import 'package:islamicquiz/core/utils/admin_checker.dart'; // ‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï import
import 'package:islamicquiz/core/managers/point_manager.dart';
import 'package:islamicquiz/presentation/screens/admin_login_screen.dart';

class AdminRechargeScreen extends StatefulWidget {
  const AdminRechargeScreen({Key? key}) : super(key: key);

  @override
  State<AdminRechargeScreen> createState() => _AdminRechargeScreenState();
}

class _AdminRechargeScreenState extends State<AdminRechargeScreen> {
  List<Map<String, dynamic>> _rechargeRequests = [];
  bool _isLoading = true;
  bool _isAdmin = false;

  @override
  void initState() {
    super.initState();
    _checkAdminStatus();
  }

  Future<void> _checkAdminStatus() async {
    try {
      final isAdmin = await AdminChecker.isAdmin();
      setState(() {
        _isAdmin = isAdmin;
      });

      if (_isAdmin) {
        _loadRechargeRequests();
      } else {
        setState(() {
          _isLoading = false;
        });
      }
    } catch (e) {
      print("Admin status check error: $e");
      setState(() {
        _isLoading = false;
        _isAdmin = false;
      });
    }
  }

  Future<void> _loadRechargeRequests() async {
    try {
      final requests = await PointManager.getGiftHistory();
      setState(() {
        _rechargeRequests = requests;
        _isLoading = false;
      });
    } catch (e) {
      print("‡¶ó‡¶ø‡¶´‡¶ü ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e");
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _logoutAdmin() async {
    await AdminChecker.logoutAdmin();
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => const AdminLoginScreen()),
    );
  }

  // üî• ‡¶Ø‡¶¶‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ ‡¶π‡ßü, ‡¶≤‡¶ó‡¶ø‡¶® ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
  Widget _buildAdminLoginPrompt() {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡¶è‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶°‡¶ø‡¶®‡¶æ‡¶á‡¶°'),
        backgroundColor: Colors.red,
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Icon(Icons.block, size: 80, color: Colors.red),
              const SizedBox(height: 24),
              const Text(
                '‡¶è‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶°‡¶ø‡¶®‡¶æ‡¶á‡¶°',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: Colors.red,
                ),
              ),
              const SizedBox(height: 16),
              const Text(
                '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶á ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶è‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 16),
              ),
              const SizedBox(height: 32),
              ElevatedButton(
                onPressed: () {
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(
                      builder: (context) => const AdminLoginScreen(),
                    ),
                  );
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green[800],
                  foregroundColor: Colors.white,
                ),
                child: const Text('‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶≤‡¶ó‡¶ø‡¶®'),
              ),
              const SizedBox(height: 16),
              TextButton(
                onPressed: () {
                  Navigator.pop(context);
                },
                child: const Text('‡¶π‡ßã‡¶Æ‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // ‡¶∞‡¶ø‡¶ö‡¶æ‡¶∞‡ßç‡¶ú ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü
  Future<void> _updateRequestStatus(String requestId, String newStatus) async {
    try {
      await PointManager.updateGiftStatus(requestId, newStatus);
      await _loadRechargeRequests();

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("‚úÖ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü $newStatus ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá"),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("‚ùå ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e"),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    // üî• ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ ‡¶π‡ßü, ‡¶≤‡¶ó‡¶ø‡¶® ‡¶™‡ßç‡¶∞‡¶Æ‡ßç‡¶™‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
    if (!_isAdmin) {
      return _buildAdminLoginPrompt();
    }

    final pendingRequests = _rechargeRequests
        .where((r) => r['status'] == 'pending')
        .toList();
    final completedRequests = _rechargeRequests
        .where((r) => r['status'] == 'completed')
        .toList();

    return Scaffold(
      appBar: AppBar(
        title: const Text("‡¶ó‡¶ø‡¶´‡¶ü ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü (‡¶è‡¶°‡¶Æ‡¶ø‡¶®)"),
        backgroundColor: Colors.green[800],
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadRechargeRequests,
            tooltip: "‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂",
          ),
          IconButton(
            icon: const Icon(Icons.logout),
            onPressed: _logoutAdmin,
            tooltip: "‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü",
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : DefaultTabController(
              length: 2,
              child: Column(
                children: [
                  Material(
                    color: Colors.green[800],
                    child: TabBar(
                      labelColor: Colors.white,
                      unselectedLabelColor: Colors.white70,
                      indicatorColor: Colors.white,
                      tabs: [
                        Tab(
                          icon: const Icon(Icons.pending_actions),
                          text: "‡¶¨‡¶ø‡¶ö‡¶æ‡¶∞‡¶æ‡¶ß‡ßÄ‡¶® (${pendingRequests.length})",
                        ),
                        Tab(
                          icon: const Icon(Icons.history),
                          text: "‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® (${completedRequests.length})",
                        ),
                      ],
                    ),
                  ),
                  Expanded(
                    child: TabBarView(
                      children: [
                        // ‡¶¨‡¶ø‡¶ö‡¶æ‡¶∞‡¶æ‡¶ß‡ßÄ‡¶® ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨
                        pendingRequests.isEmpty
                            ? const Center(
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Icon(
                                      Icons.check_circle,
                                      size: 64,
                                      color: Colors.green,
                                    ),
                                    SizedBox(height: 16),
                                    Text("‡¶ï‡ßã‡¶® ‡¶¨‡¶ø‡¶ö‡¶æ‡¶∞‡¶æ‡¶ß‡ßÄ‡¶® ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶®‡ßá‡¶á"),
                                  ],
                                ),
                              )
                            : ListView.builder(
                                itemCount: pendingRequests.length,
                                itemBuilder: (context, index) {
                                  final request = pendingRequests[index];
                                  return _buildRequestCard(request, true);
                                },
                              ),

                        // ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨
                        completedRequests.isEmpty
                            ? const Center(
                                child: Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Icon(
                                      Icons.receipt_long,
                                      size: 64,
                                      color: Colors.grey,
                                    ),
                                    SizedBox(height: 16),
                                    Text("‡¶ï‡ßã‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶®‡ßá‡¶á"),
                                  ],
                                ),
                              )
                            : ListView.builder(
                                itemCount: completedRequests.length,
                                itemBuilder: (context, index) {
                                  final request = completedRequests[index];
                                  return _buildRequestCard(request, false);
                                },
                              ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
    );
  }

  // ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡ßá‡¶∞ _buildRequestCard ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá
  // ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶®‡ßá‡¶∞ _buildRequestCard ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá - FIXED VERSION
  Widget _buildRequestCard(Map<String, dynamic> request, bool isPending) {
    // üî• FIX: Convert points to String
    final pointsUsed = request['pointsUsed'];
    final pointsText = pointsUsed != null
        ? pointsUsed is int
              ? '$pointsUsed'
              : pointsUsed.toString()
        : '0';

    // üî• FIX: Safe access for processedAt field
    final processedAt = request['processedAt'];
    final showProcessedDate = !isPending && processedAt != null;

    return Card(
      margin: const EdgeInsets.all(8),
      elevation: 2,
      child: ListTile(
        leading: Icon(
          isPending ? Icons.pending : Icons.check_circle,
          color: isPending ? Colors.orange : Colors.green,
          size: 30,
        ),
        title: Text(
          request['mobileNumber'] ?? '‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡ßá‡¶á',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: isPending ? Colors.orange : Colors.green,
          ),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(request['userEmail'] ?? '‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶®‡ßá‡¶á'),
            Text("‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: ${_formatDate(request['requestedAt'])}"),
            if (showProcessedDate) Text("‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®: ${_formatDate(processedAt)}"),
            // üî• FIXED: Safe access
          ],
        ),
        trailing: Text(
          "$pointsText ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü", // üî• FIXED
          style: const TextStyle(
            fontWeight: FontWeight.bold,
            color: Colors.green,
          ),
        ),
        onTap: () => _showRequestDetails(request),
      ),
    );
  }

  // _showRequestDetails ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶Ö‡¶Ç‡¶∂
  void _showRequestDetails(Map<String, dynamic> request) {
    // üî• FIX: Convert points to String
    final pointsUsed = request['pointsUsed'];
    final pointsText = pointsUsed != null
        ? pointsUsed is int
              ? '$pointsUsed'
              : pointsUsed.toString()
        : '0';

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("‡¶ó‡¶ø‡¶´‡¶ü ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶°‡¶ø‡¶ü‡ßá‡¶á‡¶≤‡¶∏"),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildDetailRow("‡¶á‡¶â‡¶ú‡¶æ‡¶∞:", request['userEmail'] ?? '‡¶®‡¶æ‡¶á'),
            _buildDetailRow("‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤:", request['mobileNumber'] ?? '‡¶®‡¶æ‡¶á'),
            _buildDetailRow("‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü:", "$pointsText ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü"), // üî• FIXED
            _buildDetailRow("‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏:", _getStatusText(request['status'])),
            _buildDetailRow(
              "‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ:",
              _formatDate(request['requestedAt']),
            ),
            if (request['processedAt'] != null)
              _buildDetailRow(
                "‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ:",
                _formatDate(request['processedAt']),
              ),
          ],
        ),
        actions: [
          if (request['status'] == 'pending') ...[
            TextButton(
              onPressed: () {
                final requestId =
                    request['id']?.toString() ?? ''; // üî• FIX: Safe access
                if (requestId.isNotEmpty) {
                  _updateRequestStatus(requestId, 'rejected');
                }
              },
              child: const Text(
                "‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®",
                style: TextStyle(color: Colors.red),
              ),
            ),
            ElevatedButton(
              onPressed: () {
                final requestId =
                    request['id']?.toString() ?? ''; // üî• FIX: Safe access
                if (requestId.isNotEmpty) {
                  _updateRequestStatus(requestId, 'completed');
                  Navigator.pop(context);
                  _showRechargeCompletedDialog(request);
                }
              },
              child: const Text("‡¶ó‡¶ø‡¶´‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®"),
            ),
          ],
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text("‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®"),
          ),
        ],
      ),
    );
  }

  void _showRechargeCompletedDialog(Map<String, dynamic> request) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("‚úÖ ‡¶ó‡¶ø‡¶´‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®"),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text("‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ó‡¶ø‡¶´‡¶ü ‡¶¶‡¶ø‡ßü‡ßá ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®?"),
            const SizedBox(height: 10),
            Text(
              "‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤: ${request['mobileNumber']}",
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            Text(
              "‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£: ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶™‡ßÅ‡¶∞‡ßÅ‡¶∏‡ßç‡¶ï‡¶æ‡¶∞",
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            const Text(
              "‡¶∞‡¶ø‡¶Æ‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞: ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá ‡¶ó‡¶ø‡¶´‡¶ü ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá",
              style: TextStyle(fontSize: 12, color: Colors.grey),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text("‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá"),
          ),
        ],
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 100,
            child: Text(
              label,
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
          ),
          const SizedBox(width: 8),
          Expanded(child: Text(value)),
        ],
      ),
    );
  }

  String _getStatusText(String status) {
    switch (status) {
      case 'pending':
        return '‡¶¨‡¶ø‡¶ö‡¶æ‡¶∞‡¶æ‡¶ß‡ßÄ‡¶®';
      case 'completed':
        return '‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®';
      case 'rejected':
        return '‡¶¨‡¶æ‡¶§‡¶ø‡¶≤';
      default:
        return status;
    }
  }

  String _formatDate(String dateString) {
    try {
      DateTime date = DateTime.parse(dateString);
      return "${date.day}/${date.month}/${date.year} ${date.hour}:${date.minute.toString().padLeft(2, '0')}";
    } catch (e) {
      return "‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶®‡ßá‡¶á";
    }
  }
}
