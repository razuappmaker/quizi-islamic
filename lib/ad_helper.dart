import 'package:flutter/widgets.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../utils/premium_manager.dart';

class AdHelper {
  static bool _isAdInitialized = false;
  static final AdLimitManager _adLimitManager = AdLimitManager();

  // üî• Google Mobile Ads SDK ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡ßÅ‡¶®
  static Future<void> initialize() async {
    if (_isAdInitialized) return;

    try {
      await MobileAds.instance.initialize();
      _isAdInitialized = true;
      preloadInterstitialAd();
      print('AdMob ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶π‡ßü‡ßá‡¶õ‡ßá');
    } catch (e) {
      print('AdMob ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: $e');
    }
  }

  // üî• ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï - ‡¶∏‡¶ï‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∂‡ßã ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶è‡¶á ‡¶ö‡ßá‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
  static Future<bool> get shouldShowAds async {
    try {
      final isPremium = await PremiumManager().isPremiumUser;
      return !isPremium;
    } catch (e) {
      print('‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
      return true; // ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®
    }
  }

  // üî• ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶á‡¶â‡¶®‡¶ø‡¶ü ID
  static String get bannerAdUnitId {
    if (const bool.fromEnvironment('dart.vm.product')) {
      return 'ca-app-pub-3940256099942544/6300978111'; // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶® ID ‡¶¶‡¶ø‡¶®
    } else {
      return 'ca-app-pub-3940256099942544/6300978111'; // ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ID
    }
  }

  // üî• ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶á‡¶â‡¶®‡¶ø‡¶ü ID
  static String get interstitialAdUnitId {
    if (const bool.fromEnvironment('dart.vm.product')) {
      return 'ca-app-pub-3940256099942544/1033173712'; // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶® ID ‡¶¶‡¶ø‡¶®
    } else {
      return 'ca-app-pub-3940256099942544/1033173712'; // ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ID
    }
  }

  // üî• ‡¶∞‡¶ø‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶°‡ßá‡¶° ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶á‡¶â‡¶®‡¶ø‡¶ü ID
  static String get rewardedAdUnitId {
    if (const bool.fromEnvironment('dart.vm.product')) {
      return 'ca-app-pub-3940256099942544/5224354917'; // ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶® ID ‡¶¶‡¶ø‡¶®
    } else {
      return 'ca-app-pub-3940256099942544/5224354917'; // ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ID
    }
  }

  // üî• ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶∏‡¶π)
  static Future<bool> canShowBannerAd() async {
    final shouldShow = await shouldShowAds;
    if (!shouldShow) {
      print('‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞, ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‡¶®‡¶æ');
      return false;
    }
    return await _adLimitManager.canShowBannerAd();
  }

  // üî• ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶∏‡¶π)
  static Future<bool> canShowInterstitialAd() async {
    final shouldShow = await shouldShowAds;
    if (!shouldShow) {
      print('‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞, ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‡¶®‡¶æ');
      return false;
    }
    return await _adLimitManager.canShowInterstitialAd();
  }

  // üî• ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® - Version 6.0.0 ‡¶ï‡¶Æ‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶¨‡¶≤
  static BannerAd? createBannerAd(AdSize adSize, {BannerAdListener? listener}) {
    return BannerAd(
      adUnitId: bannerAdUnitId,
      size: adSize,
      request: const AdRequest(),
      listener:
          listener ??
          BannerAdListener(
            onAdLoaded: (Ad ad) => print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá'),
            onAdFailedToLoad: (Ad ad, LoadAdError error) =>
                print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡ßã‡¶° ‡¶π‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: $error'),
          ),
    );
  }

  // üî• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶´‡ßç‡¶Ø‡¶æ‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶Æ‡ßá‡¶ï‡¶æ‡¶®‡¶ø‡¶ú‡¶Æ ‡¶∏‡¶π - ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶ö‡ßá‡¶ï ‡¶∏‡¶π
  static Future<BannerAd?> createAdaptiveBannerAdWithFallback(
    BuildContext context, {
    int? width,
    BannerAdListener? listener,
    Orientation orientation = Orientation.portrait,
  }) async {
    try {
      bool canShowAd = await canShowBannerAd(); // ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶ö‡ßá‡¶ï ‡¶∏‡¶π

      if (!canShowAd) {
        print('‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‡¶®‡¶æ');
        return null;
      }

      // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
      final AdSize adSize = await _getAdaptiveAdSize(context, orientation);
      final bannerAd = BannerAd(
        adUnitId: bannerAdUnitId,
        size: adSize,
        request: const AdRequest(),
        listener:
            listener ??
            BannerAdListener(
              onAdLoaded: (Ad ad) => print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá'),
              onAdFailedToLoad: (Ad ad, LoadAdError error) =>
                  print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: $error'),
            ),
      );

      await bannerAd.load();
      return bannerAd;
    } catch (e) {
      // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞‡ßá ‡¶´‡ßç‡¶Ø‡¶æ‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
      print(
        '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•, ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞‡ßá ‡¶´‡ßç‡¶Ø‡¶æ‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï: $e',
      );
      final bannerAd = BannerAd(
        adUnitId: bannerAdUnitId,
        size: AdSize.banner,
        request: const AdRequest(),
        listener: listener ?? BannerAdListener(),
      );

      await bannerAd.load();
      return bannerAd;
    }
  }

  // üî• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡¶æ‡¶á‡¶ú ‡¶™‡¶æ‡¶® - ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡ßü‡¶æ‡¶≤ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶®
  static Future<AdSize> _getAdaptiveAdSize(
    BuildContext context,
    Orientation orientation,
  ) async {
    try {
      final width = MediaQuery.of(context).size.width;

      // ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶® ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶• ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶∏‡¶æ‡¶á‡¶ú‡¶ø‡¶Ç
      if (width < 400) {
        // ‡¶õ‡ßã‡¶ü ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶® (‡¶´‡ßã‡¶®)
        return orientation == Orientation.portrait
            ? AdSize(width: width.truncate(), height: 50)
            : AdSize(width: width.truncate(), height: 90);
      } else if (width < 720) {
        // ‡¶Æ‡¶æ‡¶ù‡¶æ‡¶∞‡¶ø ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶® (‡¶¨‡ßú ‡¶´‡ßã‡¶®, ‡¶õ‡ßã‡¶ü ‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡¶≤‡ßá‡¶ü)
        return orientation == Orientation.portrait
            ? AdSize(width: width.truncate(), height: 90)
            : AdSize(width: width.truncate(), height: 90);
      } else {
        // ‡¶¨‡ßú ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶ø‡¶® (‡¶ü‡ßç‡¶Ø‡¶æ‡¶¨‡¶≤‡ßá‡¶ü)
        return orientation == Orientation.portrait
            ? AdSize(width: width.truncate(), height: 90)
            : AdSize(width: width.truncate(), height: 90);
      }
    } catch (e) {
      print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡¶æ‡¶á‡¶ú ‡¶™‡ßá‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
      return AdSize.banner; // ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ú‡ßá ‡¶´‡ßç‡¶Ø‡¶æ‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï
    }
  }

  // üî• ‡¶ì‡¶∞‡¶ø‡ßü‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∂‡¶® ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
  static Future<BannerAd?> reloadBannerOnOrientationChange(
    BuildContext context,
    Orientation currentOrientation, {
    BannerAdListener? listener,
  }) async {
    return await createAdaptiveBannerAdWithFallback(
      context,
      listener: listener,
      orientation: currentOrientation,
    );
  }

  // üî• ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü
  static InterstitialAd? _interstitialAd;
  static bool _isInterstitialAdLoaded = false;
  static int _interstitialLoadAttempts = 0;
  static const int _maxInterstitialLoadAttempts = 3;

  // üî• ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶∞‡¶ø‡¶ü‡ßç‡¶∞‡¶æ‡¶á ‡¶Æ‡ßá‡¶ï‡¶æ‡¶®‡¶ø‡¶ú‡¶Æ ‡¶∏‡¶π
  static void loadInterstitialAd({
    VoidCallback? onAdLoaded,
    VoidCallback? onAdFailedToLoad,
  }) {
    if (_interstitialLoadAttempts >= _maxInterstitialLoadAttempts) {
      print('‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶∏‡ßÄ‡¶Æ‡¶æ ‡¶∂‡ßá‡¶∑');
      onAdFailedToLoad?.call();
      return;
    }

    InterstitialAd.load(
      adUnitId: interstitialAdUnitId,
      request: const AdRequest(),
      adLoadCallback: InterstitialAdLoadCallback(
        onAdLoaded: (InterstitialAd ad) {
          _interstitialAd = ad;
          _isInterstitialAdLoaded = true;
          _interstitialLoadAttempts = 0;
          print('‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá');
          onAdLoaded?.call();
        },
        onAdFailedToLoad: (LoadAdError error) {
          _interstitialLoadAttempts++;
          _isInterstitialAdLoaded = false;
          print(
            '‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡ßã‡¶° ‡¶π‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: $error‡•§ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ $_interstitialLoadAttempts',
          );

          // ‡¶¨‡¶ø‡¶≤‡¶Æ‡ßç‡¶¨Âêé ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
          Future.delayed(Duration(seconds: 2 * _interstitialLoadAttempts), () {
            loadInterstitialAd(
              onAdLoaded: onAdLoaded,
              onAdFailedToLoad: onAdFailedToLoad,
            );
          });

          onAdFailedToLoad?.call();
        },
      ),
    );
  }

  // üî• ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶™‡ßç‡¶∞‡¶ø‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
  static void preloadInterstitialAd() {
    loadInterstitialAd();
  }

  // üî• ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶® (‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶∏‡¶π)
  static Future<void> showInterstitialAd({
    VoidCallback? onAdShowed,
    VoidCallback? onAdDismissed,
    VoidCallback? onAdFailedToShow,
    String? adContext, // ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
  }) async {
    final shouldShow = await shouldShowAds;
    if (!shouldShow) {
      print('‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞, ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡ßç‡¶ï‡¶ø‡¶™ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá');
      onAdDismissed?.call(); // ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶≤‡ßá‡¶ì onAdDismissed ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
      return;
    }

    try {
      print('‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: $adContext');

      // ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü based ‡¶è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
      bool canShowAd = await _adLimitManager.canShowInterstitialAd();

      if (!canShowAd) {
        print('‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ');
        onAdFailedToShow?.call();
        return;
      }

      if (_isInterstitialAdLoaded && _interstitialAd != null) {
        await _adLimitManager.recordInterstitialAdShown();

        _interstitialAd!.fullScreenContentCallback = FullScreenContentCallback(
          onAdShowedFullScreenContent: (InterstitialAd ad) {
            print('‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá');
            onAdShowed?.call();
          },
          onAdDismissedFullScreenContent: (InterstitialAd ad) {
            print('‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° dismiss ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá');
            ad.dispose();
            _isInterstitialAdLoaded = false;
            onAdDismissed?.call();
            loadInterstitialAd(); // ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶™‡ßç‡¶∞‡¶ø‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
          },
          onAdFailedToShowFullScreenContent:
              (InterstitialAd ad, AdError error) {
                print('‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: $error');
                ad.dispose();
                _isInterstitialAdLoaded = false;
                onAdFailedToShow?.call();
                loadInterstitialAd(); // ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶™‡ßç‡¶∞‡¶ø‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
              },
        );

        _interstitialAd!.show();
        _interstitialAd = null; // ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡ßü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∞‡ßã‡¶ß
      } else {
        print('‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡ßã‡¶° ‡¶π‡ßü‡¶®‡¶ø, ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá');
        onAdFailedToShow?.call();
        loadInterstitialAd(); // ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶¨‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
      }
    } catch (e) {
      print('‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
      onAdFailedToShow?.call();
    }
  }

  // üî• ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
  static Future<void> recordBannerAdShown() async {
    await _adLimitManager.recordBannerAdShown();
  }

  // üî• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
  static Future<bool> canClickAd() async {
    return await _adLimitManager.canClickAd();
  }

  // üî• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
  static Future<void> recordAdClick() async {
    await _adLimitManager.recordAdClick();
  }

  // üî• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶∏ ‡¶™‡¶æ‡¶®
  static Future<Map<String, int>> getAdStats() async {
    return await _adLimitManager.getAdStats();
  }

  // üî• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶ü‡ßá‡¶∏‡ßç‡¶ü‡¶ø‡¶Ç ‡¶¨‡¶æ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá)
  static Future<void> resetAdLimits() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('first_ad_today');
    await prefs.remove('daily_impressions');
    await prefs.remove('daily_clicks');
    await prefs.remove('minute_impressions');
    await prefs.remove('banner_impressions');
    await prefs.remove('interstitial_impressions');
    print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá');
  }

  // üî• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï‡¶∞‡¶° ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ú ‡¶™‡¶æ‡¶®
  static Future<AnchoredAdaptiveBannerAdSize?> getAnchoredAdaptiveBannerAdSize(
    BuildContext context,
  ) async {
    try {
      return await AdSize.getCurrentOrientationAnchoredAdaptiveBannerAdSize(
        MediaQuery.of(context).size.width.toInt(),
      );
    } catch (e) {
      print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï‡¶∞‡¶° ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ú ‡¶™‡ßá‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
      return null;
    }
  }

  // üî• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï‡¶∞‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® - ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶ö‡ßá‡¶ï ‡¶∏‡¶π
  static Future<BannerAd?> createAnchoredBannerAd(
    BuildContext context, {
    BannerAdListener? listener,
  }) async {
    try {
      bool canShowAd = await canShowBannerAd(); // ‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶ö‡ßá‡¶ï ‡¶∏‡¶π

      if (!canShowAd) {
        print('‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∞‡¶ø‡¶ö‡¶°, ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‡¶®‡¶æ');
        return null;
      }

      final adSize = await getAnchoredAdaptiveBannerAdSize(context);

      if (adSize == null) {
        print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï‡¶∞‡¶° ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶æ‡¶™‡ßç‡¶ü‡¶ø‡¶≠ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶á‡¶ú ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø');
        return null;
      }

      final bannerAd = BannerAd(
        size: adSize,
        adUnitId: bannerAdUnitId,
        listener:
            listener ??
            BannerAdListener(
              onAdLoaded: (Ad ad) {
                print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï‡¶∞‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§');
                recordBannerAdShown();
              },
              onAdFailedToLoad: (Ad ad, LoadAdError error) {
                print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï‡¶∞‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡ßã‡¶° ‡¶π‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: $error');
                ad.dispose();
              },
              onAdOpened: (Ad ad) {
                canClickAd().then((canClick) {
                  if (canClick) {
                    recordAdClick();
                    print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï‡¶∞‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§');
                  } else {
                    print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∞‡¶ø‡¶ö‡¶°');
                  }
                });
              },
              onAdClosed: (Ad ad) {
                print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï‡¶∞‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§');
              },
            ),
        request: const AdRequest(),
      );

      await bannerAd.load();
      return bannerAd;
    } catch (e) {
      print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ô‡ßç‡¶ï‡¶∞‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
      return null;
    }
  }

  // üî• ‡¶∏‡¶π‡¶ú ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶° - ‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
  static Future<BannerAd?> loadSimpleBannerAd(
    BuildContext context, {
    BannerAdListener? listener,
  }) async {
    try {
      bool canShowAd = await canShowBannerAd();

      if (!canShowAd) {
        print('‡¶™‡ßç‡¶∞‡¶ø‡¶Æ‡¶ø‡ßü‡¶æ‡¶Æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞, ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‡¶®‡¶æ');
        return null;
      }

      final bannerAd = await createAnchoredBannerAd(
        context,
        listener: listener,
      );
      return bannerAd;
    } catch (e) {
      print('‡¶∏‡¶ø‡¶Æ‡ßç‡¶™‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
      return null;
    }
  }

  // üî• ‡¶°‡¶ø‡¶∏‡¶™‡ßã‡¶ú ‡¶Æ‡ßá‡¶•‡¶°
  static void disposeInterstitialAd() {
    _interstitialAd?.dispose();
    _isInterstitialAdLoaded = false;
    _interstitialLoadAttempts = 0;
  }

  // üî• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶∏ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
  static bool get isInitialized => _isAdInitialized;
}

// ==================== ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ====================
class AdLimitManager {
  static const int maxDailyImpressions = 400; // production ‡¶è 20 ‡¶π‡¶¨‡ßá
  static const int maxDailyClicks = 5;
  static const int maxImpressionsPerMinute = 30; // production ‡¶è 3 ‡¶π‡¶¨‡ßá
  static const int maxBannerAdsPerHour = 100; // production ‡¶è 10 ‡¶π‡¶¨‡ßá
  static const int maxInterstitialAdsPerHour = 30; // production ‡¶è 3 ‡¶π‡¶¨‡ßá

  // üî• ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
  Future<bool> canShowBannerAd() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await _resetIfNewDay(prefs);

      final dailyImpressions = prefs.getInt('daily_impressions') ?? 0;
      if (dailyImpressions >= maxDailyImpressions) {
        return false;
      }

      final now = DateTime.now();
      final minuteImpressions = prefs.getStringList('minute_impressions') ?? [];
      final currentMinute = '${now.hour}:${now.minute}';
      final minuteCount = minuteImpressions
          .where((time) => time == currentMinute)
          .length;

      if (minuteCount >= maxImpressionsPerMinute) {
        return false;
      }

      final bannerImpressions = prefs.getStringList('banner_impressions') ?? [];
      final currentHour = now.hour;
      final hourCount = bannerImpressions.where((time) {
        final hour = int.parse(time.split(':')[0]);
        return hour == currentHour;
      }).length;

      if (hourCount >= maxBannerAdsPerHour) {
        return false;
      }

      return true;
    } catch (e) {
      print('‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
      return true; // ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶ö‡ßá‡¶ï‡¶ø‡¶Ç ‡¶è ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° allow ‡¶ï‡¶∞‡ßÅ‡¶®
    }
  }

  // üî• ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
  Future<bool> canShowInterstitialAd() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await _resetIfNewDay(prefs);

      final dailyImpressions = prefs.getInt('daily_impressions') ?? 0;
      if (dailyImpressions >= maxDailyImpressions) {
        return false;
      }

      final now = DateTime.now();
      final interstitialImpressions =
          prefs.getStringList('interstitial_impressions') ?? [];
      final currentHour = now.hour;
      final hourCount = interstitialImpressions.where((time) {
        final hour = int.parse(time.split(':')[0]);
        return hour == currentHour;
      }).length;

      if (hourCount >= maxInterstitialAdsPerHour) {
        return false;
      }

      return true;
    } catch (e) {
      print('‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
      return true; // ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶ö‡ßá‡¶ï‡¶ø‡¶Ç ‡¶è ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° allow ‡¶ï‡¶∞‡ßÅ‡¶®
    }
  }

  // üî• ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
  Future<void> recordBannerAdShown() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final now = DateTime.now();

      final dailyImpressions = (prefs.getInt('daily_impressions') ?? 0) + 1;
      await prefs.setInt('daily_impressions', dailyImpressions);

      final minuteImpressions = prefs.getStringList('minute_impressions') ?? [];
      minuteImpressions.add('${now.hour}:${now.minute}');
      await prefs.setStringList('minute_impressions', minuteImpressions);

      final bannerImpressions = prefs.getStringList('banner_impressions') ?? [];
      bannerImpressions.add('${now.hour}:${now.minute}');
      await prefs.setStringList('banner_impressions', bannerImpressions);
    } catch (e) {
      print('‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶á‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
    }
  }

  // üî• ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
  Future<void> recordInterstitialAdShown() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final now = DateTime.now();

      final dailyImpressions = (prefs.getInt('daily_impressions') ?? 0) + 1;
      await prefs.setInt('daily_impressions', dailyImpressions);

      final interstitialImpressions =
          prefs.getStringList('interstitial_impressions') ?? [];
      interstitialImpressions.add('${now.hour}:${now.minute}');
      await prefs.setStringList(
        'interstitial_impressions',
        interstitialImpressions,
      );
    } catch (e) {
      print('‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶∏‡ßç‡¶ü‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶á‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
    }
  }

  // üî• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
  Future<bool> canClickAd() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await _resetIfNewDay(prefs);

      final dailyClicks = prefs.getInt('daily_clicks') ?? 0;
      return dailyClicks < maxDailyClicks;
    } catch (e) {
      print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
      return true; // ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶ö‡ßá‡¶ï‡¶ø‡¶Ç ‡¶è ‡¶è‡¶∞‡¶∞ ‡¶π‡¶≤‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï allow ‡¶ï‡¶∞‡ßÅ‡¶®
    }
  }

  // üî• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
  Future<void> recordAdClick() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final dailyClicks = (prefs.getInt('daily_clicks') ?? 0) + 1;
      await prefs.setInt('daily_clicks', dailyClicks);
    } catch (e) {
      print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
    }
  }

  // üî• ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶∏ ‡¶™‡¶æ‡¶®
  Future<Map<String, int>> getAdStats() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await _resetIfNewDay(prefs);

      return {
        'daily_impressions': prefs.getInt('daily_impressions') ?? 0,
        'daily_clicks': prefs.getInt('daily_clicks') ?? 0,
        'max_daily_impressions': maxDailyImpressions,
        'max_daily_clicks': maxDailyClicks,
      };
    } catch (e) {
      print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶∏ ‡¶™‡ßá‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
      return {
        'daily_impressions': 0,
        'daily_clicks': 0,
        'max_daily_impressions': maxDailyImpressions,
        'max_daily_clicks': maxDailyClicks,
      };
    }
  }

  // üî• ‡¶®‡¶§‡ßÅ‡¶® ‡¶¶‡¶ø‡¶® ‡¶π‡¶≤‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
  Future<void> _resetIfNewDay(SharedPreferences prefs) async {
    try {
      final firstAdToday = prefs.getString('first_ad_today');
      final now = DateTime.now();

      if (firstAdToday == null) {
        await prefs.setString('first_ad_today', now.toIso8601String());
      } else {
        final firstAdDate = DateTime.parse(firstAdToday);
        if (now.difference(firstAdDate).inHours >= 24) {
          await prefs.setString('first_ad_today', now.toIso8601String());
          await prefs.setInt('daily_impressions', 0);
          await prefs.setInt('daily_clicks', 0);
          await prefs.setStringList('minute_impressions', []);
          await prefs.setStringList('banner_impressions', []);
          await prefs.setStringList('interstitial_impressions', []);
        }
      }
    } catch (e) {
      print('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶° ‡¶≤‡¶ø‡¶Æ‡¶ø‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: $e');
    }
  }
}
