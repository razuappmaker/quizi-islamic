// network_json_loader.dart
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:flutter/services.dart' show rootBundle;

class NetworkJsonLoader {
  static const String baseUrl = "https://appmaker.com/assets/";

  static Future<List<dynamic>> loadJsonList(String filePath) async {
    final fileName = filePath.split('/').last;
    print('ЁЯФД рж▓рзЛржб ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛: $fileName');

    // рззржо ржЪрзЗрж╖рзНржЯрж╛: ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржерзЗржХрзЗ рж▓рзЛржб (ржжрзНрж░рзБржд timeout рж╕рж╣)
    try {
      print('ЁЯМР ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржерзЗржХрзЗ рж▓рзЛржб: $fileName');
      final networkData = await _loadFromNetwork(
        fileName,
      ).timeout(Duration(seconds: 6)); // тЬЕ ржорзЛржЯ timeout 6 рж╕рзЗржХрзЗржирзНржб
      print('тЬЕ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржерзЗржХрзЗ рж╕ржлрж▓: $fileName');
      return networkData;
    } catch (e) {
      print('тЭМ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржмрзНржпрж░рзНрже ($fileName): $e');
    }

    // рзирзЯ ржЪрзЗрж╖рзНржЯрж╛: рж▓рзЛржХрж╛рж▓ asset ржерзЗржХрзЗ рж▓рзЛржб
    try {
      print('ЁЯУБ рж▓рзЛржХрж╛рж▓ asset ржерзЗржХрзЗ рж▓рзЛржб: $filePath');
      final localData = await _loadFromAsset(
        filePath,
      ).timeout(Duration(seconds: 3)); // тЬЕ рж▓рзЛржХрж╛рж▓рзЗржУ timeout
      print('тЬЕ рж▓рзЛржХрж╛рж▓ asset ржерзЗржХрзЗ рж╕ржлрж▓: $filePath');
      return localData;
    } catch (e) {
      print('тЭМ рж▓рзЛржХрж╛рж▓ asset ржмрзНржпрж░рзНрже ($filePath): $e');
    }

    // рзйрзЯ ржЪрзЗрж╖рзНржЯрж╛: ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛ (ржЗржирж╕рзНржЯрзНржпрж╛ржирзНржЯ)
    print('тЪая╕П рж╕ржХрж▓ рж╕рзЛрж░рзНрж╕ ржмрзНржпрж░рзНрже, ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛ ржмрзНржпржмрж╣рж╛рж░: $fileName');
    return _getDefaultData(fileName);
  }

  static Future<List<dynamic>> _loadFromNetwork(String fileName) async {
    final url = '$baseUrl$fileName';
    print('ЁЯФЧ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ URL: $url');

    final httpClient = HttpClient();

    try {
      httpClient.connectionTimeout = Duration(seconds: 4); // тЬЕ 4 рж╕рзЗржХрзЗржирзНржб
      httpClient.idleTimeout = Duration(seconds: 4); // тЬЕ idle timeout

      final request = await httpClient.getUrl(Uri.parse(url));
      final response = await request.close().timeout(
        Duration(seconds: 5),
      ); // тЬЕ 5 рж╕рзЗржХрзЗржирзНржб

      print('ЁЯУК HTTP Status Code: ${response.statusCode}');

      if (response.statusCode == 200) {
        final responseBody = await response
            .transform(utf8.decoder)
            .timeout(Duration(seconds: 3)) // тЬЕ ржбрзЗржЯрж╛ рж░рж┐ржбрж┐ржВ timeout
            .join();

        // тЬЕ рж╕ржВржХрзНрж╖рж┐ржкрзНржд debug (performance ржЬржирзНржп)
        final previewLength = responseBody.length < 100
            ? responseBody.length
            : 100;
        print('ЁЯУД Response preview (first $previewLength chars)');

        try {
          final jsonData = json.decode(responseBody);

          if (jsonData is List) return jsonData;
          if (jsonData is Map) return [jsonData];

          throw Exception('ржЕржмрзИржз JSON ржлрж░ржорзНржпрж╛ржЯ');
        } catch (e) {
          print('тЭМ JSON decode error: $e');
          throw Exception('Invalid JSON format');
        }
      } else {
        throw Exception('HTTP error: ${response.statusCode}');
      }
    } on TimeoutException {
      print('тП░ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржЯрж╛ржЗржоржЖржЙржЯ - ржжрзНрж░рзБржд ржлрзНржпрж╛рж▓ржмрзНржпрж╛ржХ');
      throw Exception('ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржЯрж╛ржЗржоржЖржЙржЯ');
    } on SocketException {
      print('ЁЯМР ржЗржирзНржЯрж╛рж░ржирзЗржЯ рж╕ржВржпрзЛржЧ ржирзЗржЗ - ржжрзНрж░рзБржд ржлрзНржпрж╛рж▓ржмрзНржпрж╛ржХ');
      throw Exception('ржЗржирзНржЯрж╛рж░ржирзЗржЯ рж╕ржВржпрзЛржЧ ржирзЗржЗ');
    } catch (e) {
      print('тЭМ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рждрзНрж░рзБржЯрж┐: $e');
      throw Exception('ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рждрзНрж░рзБржЯрж┐');
    } finally {
      httpClient.close();
    }
  }

  static Future<List<dynamic>> _loadFromAsset(String filePath) async {
    try {
      final String response = await rootBundle.loadString(filePath);
      final data = json.decode(response);

      if (data is List) return data;
      if (data is Map) return [data];

      throw Exception('рж▓рзЛржХрж╛рж▓ JSON ржлрж░ржорзНржпрж╛ржЯ ржЕржмрзИржз');
    } catch (e) {
      throw Exception('рж▓рзЛржХрж╛рж▓ asset рж▓рзЛржб ржмрзНржпрж░рзНрже: $e');
    }
  }

  // ржлрж╛ржЗрж▓ ржЕржирзБржпрж╛ржпрж╝рзА ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛
  // network_json_loader.dart - _getDefaultData ржорзЗржержбрзЗ ржпрзЛржЧ ржХрж░рзБржи
  static List<dynamic> _getDefaultData(String fileName) {
    print('ЁЯУЛ ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛ ржмрзНржпржмрж╣рж╛рж░: $fileName');

    // ржлрж╛ржЗрж▓ ржирж╛ржо ржЕржирзБржпрж╛ржпрж╝рзА ржЖрж▓рж╛ржжрж╛ ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛ ржПржЦрж╛ржирзЗ ржЖржорж╛рж░ рж╕ржХрж▓ json ржХрзЗ ржжрзЗржЦрж┐рзЯрзЗ ржжрж┐рждрзЗ рж╣ржПржм ржмрж╛ржЩрзНржЧрж╛рж▓ ржЗржВрж░рзЗржЬрж┐ рж╕ржм ржЧрзБрж▓рзЛ
    switch (fileName) {
      case 'questions.json':
        return _getDefaultQuestions();
      case 'salat_doyas.json':
        return _getDefaultSalatDoyas();
      case 'quranic_doyas.json':
        return _getDefaultQuranicDoyas();
      case 'copple_doya.json':
        return _getDefaultCoppleDoyas();
      case 'morning_evening_doya.json':
        return _getDefaultMorningEveningDoyas();
      case 'daily_life_doyas.json':
        return _getDefaultDailyLifeDoyas();
      case 'rog_mukti_doyas.json':
        return _getDefaultNamajAmol();
      case 'fasting_doyas.json':
        return _getDefaultFastingDoyas();
      case 'misc_doyas.json':
        return _getDefaultMiscDoyas();
      case 'wordquran.json': // тЬЕ ржирждрзБржи ржХрзЗрж╕ ржпрзЛржЧ ржХрж░рзБржи
        return _getDefaultWordQuran();
      default:
        return _getGenericDefaultData();
    }
  }

  // Word Quran-ржПрж░ ржЬржирзНржп ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛ ржпрзЛржЧ ржХрж░рзБржи
  static List<dynamic> _getDefaultWordQuran() {
    return [
      {
        'title': 'рж╕рзВрж░рж╛ ржЖрж▓ ржлрж╛рждрж┐рж╣рж╛ - ╪з┘Д┘Б╪з╪к╪н╪й',
        'ayat': [
          {
            'arabic_words': [
              {'word': '╪и┘Р╪│┘Т┘Е┘Р', 'meaning': 'ржирж╛ржорзЗ'},
              {'word': '┘▒┘Д┘Д┘О┘С┘░┘З┘Р', 'meaning': 'ржЖрж▓рзНрж▓рж╛рж╣рж░'},
              {'word': '┘▒┘Д╪▒┘О┘С╪н┘Т┘Е┘О┘░┘Ж┘Р', 'meaning': 'ржкрж░ржо ржХрж░рзБржгрж╛ржоржпрж╝'},
              {'word': '┘▒┘Д╪▒┘О┘С╪н┘Р┘К┘Е┘Р', 'meaning': 'ржЕрждрж┐ ржжржпрж╝рж╛рж▓рзБ'},
            ],
            'transliteration': 'ржмрж┐рж╕ржорж┐рж▓рзНрж▓рж╛рж╣рж┐рж░ рж░рж╛рж╣ржорж╛ржирж┐рж░ рж░рж╛рж╣рж┐ржо',
            'meaning': 'ржкрж░ржо ржХрж░рзБржгрж╛ржоржпрж╝, ржкрж░ржо ржжржпрж╝рж╛рж▓рзБ ржЖрж▓рзНрж▓рж╛рж╣рж░ ржирж╛ржорзЗред',
            'reference': 'ржХрзБрж░ржЖржи, рж╕рзВрж░рж╛ ржЖрж▓ ржлрж╛рждрж┐рж╣рж╛, ржЖрзЯрж╛ржд рзз',
          },
          {
            'arabic_words': [
              {'word': '╪з┘Д┘Т╪н┘О┘Е┘Т╪п┘П', 'meaning': 'рж╕ржорж╕рзНржд ржкрзНрж░рж╢ржВрж╕рж╛'},
              {'word': '┘Д┘Р┘Д┘О┘С┘З┘Р', 'meaning': 'ржЖрж▓рзНрж▓рж╛рж╣рж░ ржЬржирзНржп'},
              {'word': '╪▒┘О╪и┘Р┘С', 'meaning': 'ржкрзНрж░рждрж┐ржкрж╛рж▓ржХ'},
              {'word': '╪з┘Д┘Т╪╣┘О╪з┘Д┘О┘Е┘Р┘К┘Ж┘О', 'meaning': 'рж╕ржХрж▓ рж╕рзГрж╖рзНржЯрж┐рж░'},
            ],
            'transliteration': 'ржЖрж▓рж╣рж╛ржоржжрзБ рж▓рж┐рж▓рзНрж▓рж╛рж╣рж┐ рж░рж╛ржмрзНржмрж┐рж▓ ржЖрж▓рж╛ржорж┐ржи',
            'meaning':
                'рж╕ржорж╕рзНржд ржкрзНрж░рж╢ржВрж╕рж╛ ржЖрж▓рзНрж▓рж╛рж╣рж░ ржЬржирзНржп, ржпрж┐ржирж┐ рж╕ржХрж▓ рж╕рзГрж╖рзНржЯрж┐рж░ ржкрзНрж░рждрж┐ржкрж╛рж▓ржХред',
            'reference': 'ржХрзБрж░ржЖржи, рж╕рзВрж░рж╛ ржЖрж▓ ржлрж╛рждрж┐рж╣рж╛, ржЖрзЯрж╛ржд рзи',
          },
        ],
      },
      {
        'title': 'рж╕рзВрж░рж╛ ржЖрж▓ ржЗржЦрж▓рж╛рж╕ - ╪з┘Д╪е╪о┘Д╪з╪╡',
        'ayat': [
          {
            'arabic_words': [
              {'word': '┘В┘П┘Д┘Т', 'meaning': 'ржмрж▓рзБржи'},
              {'word': '┘З┘П┘И┘О', 'meaning': 'рждрж┐ржирж┐'},
              {'word': '╪з┘Д┘Д┘О┘С┘З┘П', 'meaning': 'ржЖрж▓рзНрж▓рж╛рж╣'},
              {'word': '╪г┘О╪н┘О╪п┘М', 'meaning': 'ржПржХ'},
            ],
            'transliteration': 'ржХрзБрж▓ рж╣рзБржУржпрж╝рж╛рж▓рзНрж▓рж╛рж╣рзБ ржЖрж╣рж╛ржж',
            'meaning': 'ржмрж▓рзБржи, рждрж┐ржирж┐ ржЖрж▓рзНрж▓рж╛рж╣, ржПржХржХред',
            'reference': 'ржХрзБрж░ржЖржи, рж╕рзВрж░рж╛ ржЖрж▓ ржЗржЦрж▓рж╛рж╕, ржЖрзЯрж╛ржд рзз',
          },
        ],
      },
    ];
  }

  // ржмрж┐ржнрж┐ржирзНржи ржзрж░ржирзЗрж░ ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛
  static List<dynamic> _getDefaultQuestions() {
    return [
      {
        'question': 'ржЗрж╕рж▓рж╛ржорзЗрж░ ржкрзНрж░ржержо рж░рзБржХржи ржХрзА?',
        'options': ['ржирж╛ржорж╛ржЬ', 'рж░рзЛржЬрж╛', 'ржХрж╛рж▓рж┐ржорж╛', 'рж╣ржЬрзНржЬ'],
        'answer': 'ржХрж╛рж▓рж┐ржоa',
      },
    ];
  }

  static List<dynamic> _getDefaultSalatDoyas() {
    return [
      {
        'title': 'рждрж╛ржХржмрж┐рж░рж╛рждрзБрж▓ ржЗрж╣рж░рж╛ржо',
        'bangla': 'ржЖрж▓рзНрж▓рж╛рж╣рзБ ржЖржХржмрж╛рж░',
        'arabic': '╪з┘Д┘Д┘З┘П ╪г┘О┘Г┘Т╪и┘О╪▒┘П',
        'transliteration': 'ржЖрж▓рзНрж▓рж╛рж╣рзБ ржЖржХржмрж╛рж░',
        'meaning': 'ржЖрж▓рзНрж▓рж╛рж╣ рж╕рж░рзНржмрж╢рзНрж░рзЗрж╖рзНржа',
        'reference': 'рж╕рж╣рзАрж╣ ржмрзБржЦрж╛рж░рзА: рзнрзорзп',
      },
    ];
  }

  static List<dynamic> _getDefaultQuranicDoyas() {
    return [
      {
        'title': 'ржмрж┐рж╕ржорж┐рж▓рзНрж▓рж╛рж╣',
        'bangla': 'ржмрж┐рж╕ржорж┐рж▓рзНрж▓рж╛рж╣рж┐рж░ рж░рж╛рж╣ржорж╛ржирж┐рж░ рж░рж╛рж╣рзАржо',
        'arabic': '╪и┘Р╪│┘Т┘Е┘Р ╪з┘Д┘Д┘З┘Р ╪з┘Д╪▒┘О┘С╪н┘Т┘Е┘░┘Ж┘Р ╪з┘Д╪▒┘О┘С╪н┘Р┘К┘Т┘Е┘Р',
        'transliteration': 'ржмрж┐рж╕ржорж┐рж▓рзНрж▓рж╛рж╣рж┐рж░ рж░рж╛рж╣ржорж╛ржирж┐рж░ рж░рж╛рж╣рзАржо',
        'meaning': 'ржЖрж▓рзНрж▓рж╛рж╣рж░ ржирж╛ржорзЗ рж╢рзБрж░рзБ ржХрж░ржЫрж┐ ржпрж┐ржирж┐ ржкрж░ржо ржХрж░рзБржгрж╛ржоржпрж╝, ржЕрждрж┐ ржжржпрж╝рж╛рж▓рзБред',
        'reference': 'рж╕рзВрж░рж╛ ржлрж╛рждрж┐рж╣рж╛: рзз',
      },
    ];
  }

  // ржЕржирзНржпрж╛ржирзНржп ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛ ржорзЗржержбржЧрзБрж▓рзЛ ржПржЦрж╛ржирзЗ ржпрзЛржЧ ржХрж░рзБржи...
  static List<dynamic> _getDefaultCoppleDoyas() => [_getGenericDua()];

  static List<dynamic> _getDefaultMorningEveningDoyas() => [_getGenericDua()];

  static List<dynamic> _getDefaultDailyLifeDoyas() => [_getGenericDua()];

  static List<dynamic> _getDefaultNamajAmol() => [_getGenericDua()];

  static List<dynamic> _getDefaultFastingDoyas() => [_getGenericDua()];

  static List<dynamic> _getDefaultMiscDoyas() => [_getGenericDua()];

  static Map<String, dynamic> _getGenericDua() {
    return {
      'title': 'ржжрзЛржпрж╝рж╛',
      'bangla': 'ржжрзЛржпрж╝рж╛ рж▓рзЛржб рж╣рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗ',
      'arabic': '╪и┘Р╪│┘Т┘Е┘Р ╪з┘Д┘Д┘З┘Р',
      'transliteration': 'ржмрж┐рж╕ржорж┐рж▓рзНрж▓рж╛рж╣',
      'meaning': 'ржЖрж▓рзНрж▓рж╛рж╣рж░ ржирж╛ржорзЗ рж╢рзБрж░рзБ ржХрж░ржЫрж┐',
      'reference': 'ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛',
    };
  }

  static List<dynamic> _getGenericDefaultData() {
    return [_getGenericDua()];
  }
}
