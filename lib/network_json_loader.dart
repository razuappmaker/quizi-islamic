// network_json_loader.dart
import 'dart:async';
import 'dart:convert';
import 'dart:io';
import 'package:flutter/services.dart' show rootBundle;

class NetworkJsonLoader {
  // ржЖржкржирж╛рж░ ржбрзЛржорзЗржЗржи============================================================
  // ржЖржкржирж╛рж░ ржбрзЛржорзЗржЗржи============================================================
  static const String baseUrl = "https://appmaker.com/assets/";

  static Future<List<dynamic>> loadJsonList(String filePath) async {
    // filePath example: 'assets/questions.json' ржмрж╛ 'assets/salat_doyas.json'
    // ржЖржорж░рж╛ рж╢рзБржзрзБ file name ржЯрж╛ ржирж┐ржмрзЛ: 'questions.json' ржмрж╛ 'salat_doyas.json'
    final fileName = filePath.split('/').last;

    print('ЁЯФД рж▓рзЛржб ржХрж░рж╛рж░ ржЪрзЗрж╖рзНржЯрж╛: $fileName');

    // рззржо ржЪрзЗрж╖рзНржЯрж╛: ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржерзЗржХрзЗ рж▓рзЛржб
    try {
      print('ЁЯМР ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржерзЗржХрзЗ рж▓рзЛржб: $fileName');
      final networkData = await _loadFromNetwork(fileName);
      print('тЬЕ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржерзЗржХрзЗ рж╕ржлрж▓: $fileName');
      return networkData;
    } catch (e) {
      print('тЭМ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржмрзНржпрж░рзНрже ($fileName): $e');
    }

    // рзирзЯ ржЪрзЗрж╖рзНржЯрж╛: рж▓рзЛржХрж╛рж▓ asset ржерзЗржХрзЗ рж▓рзЛржб
    try {
      print('ЁЯУБ рж▓рзЛржХрж╛рж▓ asset ржерзЗржХрзЗ рж▓рзЛржб: $filePath');
      final localData = await _loadFromAsset(filePath);
      print('тЬЕ рж▓рзЛржХрж╛рж▓ asset ржерзЗржХрзЗ рж╕ржлрж▓: $filePath');
      return localData;
    } catch (e) {
      print('тЭМ рж▓рзЛржХрж╛рж▓ asset ржмрзНржпрж░рзНрже ($filePath): $e');
    }

    // рзйрзЯ ржЪрзЗрж╖рзНржЯрж╛: ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛
    print('тЪая╕П рж╕ржХрж▓ рж╕рзЛрж░рзНрж╕ ржмрзНржпрж░рзНрже, ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛ ржмрзНржпржмрж╣рж╛рж░: $fileName');
    return _getDefaultData(fileName);
  }

  // network_json_loader.dart - _loadFromNetwork ржорзЗржержбрзЗ ржПржбрж┐ржЯ ржХрж░рзБржи
  static Future<List<dynamic>> _loadFromNetwork(String fileName) async {
    final url = '$baseUrl$fileName';
    print('ЁЯФЧ ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ URL: $url');

    final httpClient = HttpClient();

    try {
      httpClient.connectionTimeout = Duration(seconds: 8);

      final request = await httpClient.getUrl(Uri.parse(url));
      final response = await request.close().timeout(Duration(seconds: 10));

      print('ЁЯУК HTTP Status Code: ${response.statusCode}');
      print('ЁЯУК Content-Type: ${response.headers.contentType}');

      if (response.statusCode == 200) {
        final responseBody = await response.transform(utf8.decoder).join();

        // тЬЕ Debug: ржкрзНрж░ржержо 500 character ржжрзЗржЦрзБржи
        final previewLength = responseBody.length < 500
            ? responseBody.length
            : 500;
        print('ЁЯУД Response preview (first $previewLength chars):');
        print(responseBody.substring(0, previewLength));

        try {
          final jsonData = json.decode(responseBody);

          if (jsonData is List) return jsonData;
          if (jsonData is Map) return [jsonData];

          throw Exception('ржЕржмрзИржз JSON ржлрж░ржорзНржпрж╛ржЯ');
        } catch (e) {
          print('тЭМ JSON decode error: $e');
          throw Exception('Invalid JSON format from server');
        }
      } else {
        throw Exception('HTTP error: ${response.statusCode}');
      }
    } on TimeoutException {
      throw Exception('ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржЯрж╛ржЗржоржЖржЙржЯ');
    } on SocketException {
      throw Exception('ржЗржирзНржЯрж╛рж░ржирзЗржЯ рж╕ржВржпрзЛржЧ ржирзЗржЗ');
    } catch (e) {
      throw Exception('ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рждрзНрж░рзБржЯрж┐: $e');
    } finally {
      httpClient.close();
    }
  }

  static Future<List<dynamic>> _loadFromAsset(String filePath) async {
    try {
      final String response = await rootBundle.loadString(filePath);
      final data = json.decode(response);

      if (data is List) return data;
      if (data is Map) return [data];

      throw Exception('рж▓рзЛржХрж╛рж▓ JSON ржлрж░ржорзНржпрж╛ржЯ ржЕржмрзИржз');
    } catch (e) {
      throw Exception('рж▓рзЛржХрж╛рж▓ asset рж▓рзЛржб ржмрзНржпрж░рзНрже: $e');
    }
  }

  // ржлрж╛ржЗрж▓ ржЕржирзБржпрж╛ржпрж╝рзА ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛
  static List<dynamic> _getDefaultData(String fileName) {
    print('ЁЯУЛ ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛ ржмрзНржпржмрж╣рж╛рж░: $fileName');

    // ржлрж╛ржЗрж▓ ржирж╛ржо ржЕржирзБржпрж╛ржпрж╝рзА ржЖрж▓рж╛ржжрж╛ ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛
    switch (fileName) {
      case 'questions.json':
        return _getDefaultQuestions();
      case 'salat_doyas.json':
        return _getDefaultSalatDoyas();
      case 'quranic_doyas.json':
        return _getDefaultQuranicDoyas();
      case 'copple_doya.json':
        return _getDefaultCoppleDoyas();
      case 'morning_evening_doya.json':
        return _getDefaultMorningEveningDoyas();
      case 'daily_life_doyas.json':
        return _getDefaultDailyLifeDoyas();
      case 'rog_mukti_doyas.json':
        return _getDefaultNamajAmol();
      case 'fasting_doyas.json':
        return _getDefaultFastingDoyas();
      case 'misc_doyas.json':
        return _getDefaultMiscDoyas();
      default:
        return _getGenericDefaultData();
    }
  }

  // ржмрж┐ржнрж┐ржирзНржи ржзрж░ржирзЗрж░ ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛
  static List<dynamic> _getDefaultQuestions() {
    return [
      {
        'question': 'ржЗрж╕рж▓рж╛ржорзЗрж░ ржкрзНрж░ржержо рж░рзБржХржи ржХрзА?',
        'options': ['ржирж╛ржорж╛ржЬ', 'рж░рзЛржЬрж╛', 'ржХрж╛рж▓рж┐ржорж╛', 'рж╣ржЬрзНржЬ'],
        'answer': 'ржХрж╛рж▓рж┐ржоa',
      },
    ];
  }

  static List<dynamic> _getDefaultSalatDoyas() {
    return [
      {
        'title': 'рждрж╛ржХржмрж┐рж░рж╛рждрзБрж▓ ржЗрж╣рж░рж╛ржо',
        'bangla': 'ржЖрж▓рзНрж▓рж╛рж╣рзБ ржЖржХржмрж╛рж░',
        'arabic': '╪з┘Д┘Д┘З┘П ╪г┘О┘Г┘Т╪и┘О╪▒┘П',
        'transliteration': 'ржЖрж▓рзНрж▓рж╛рж╣рзБ ржЖржХржмрж╛рж░',
        'meaning': 'ржЖрж▓рзНрж▓рж╛рж╣ рж╕рж░рзНржмрж╢рзНрж░рзЗрж╖рзНржа',
        'reference': 'рж╕рж╣рзАрж╣ ржмрзБржЦрж╛рж░рзА: рзнрзорзп',
      },
    ];
  }

  static List<dynamic> _getDefaultQuranicDoyas() {
    return [
      {
        'title': 'ржмрж┐рж╕ржорж┐рж▓рзНрж▓рж╛рж╣',
        'bangla': 'ржмрж┐рж╕ржорж┐рж▓рзНрж▓рж╛рж╣рж┐рж░ рж░рж╛рж╣ржорж╛ржирж┐рж░ рж░рж╛рж╣рзАржо',
        'arabic': '╪и┘Р╪│┘Т┘Е┘Р ╪з┘Д┘Д┘З┘Р ╪з┘Д╪▒┘О┘С╪н┘Т┘Е┘░┘Ж┘Р ╪з┘Д╪▒┘О┘С╪н┘Р┘К┘Т┘Е┘Р',
        'transliteration': 'ржмрж┐рж╕ржорж┐рж▓рзНрж▓рж╛рж╣рж┐рж░ рж░рж╛рж╣ржорж╛ржирж┐рж░ рж░рж╛рж╣рзАржо',
        'meaning': 'ржЖрж▓рзНрж▓рж╛рж╣рж░ ржирж╛ржорзЗ рж╢рзБрж░рзБ ржХрж░ржЫрж┐ ржпрж┐ржирж┐ ржкрж░ржо ржХрж░рзБржгрж╛ржоржпрж╝, ржЕрждрж┐ ржжржпрж╝рж╛рж▓рзБред',
        'reference': 'рж╕рзВрж░рж╛ ржлрж╛рждрж┐рж╣рж╛: рзз',
      },
    ];
  }

  // ржЕржирзНржпрж╛ржирзНржп ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛ ржорзЗржержбржЧрзБрж▓рзЛ ржПржЦрж╛ржирзЗ ржпрзЛржЧ ржХрж░рзБржи...
  static List<dynamic> _getDefaultCoppleDoyas() => [_getGenericDua()];

  static List<dynamic> _getDefaultMorningEveningDoyas() => [_getGenericDua()];

  static List<dynamic> _getDefaultDailyLifeDoyas() => [_getGenericDua()];

  static List<dynamic> _getDefaultNamajAmol() => [_getGenericDua()];

  static List<dynamic> _getDefaultFastingDoyas() => [_getGenericDua()];

  static List<dynamic> _getDefaultMiscDoyas() => [_getGenericDua()];

  static Map<String, dynamic> _getGenericDua() {
    return {
      'title': 'ржжрзЛржпрж╝рж╛',
      'bangla': 'ржжрзЛржпрж╝рж╛ рж▓рзЛржб рж╣рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗ',
      'arabic': '╪и┘Р╪│┘Т┘Е┘Р ╪з┘Д┘Д┘З┘Р',
      'transliteration': 'ржмрж┐рж╕ржорж┐рж▓рзНрж▓рж╛рж╣',
      'meaning': 'ржЖрж▓рзНрж▓рж╛рж╣рж░ ржирж╛ржорзЗ рж╢рзБрж░рзБ ржХрж░ржЫрж┐',
      'reference': 'ржбрж┐ржлрж▓рзНржЯ ржбрзЗржЯрж╛',
    };
  }

  static List<dynamic> _getGenericDefaultData() {
    return [_getGenericDua()];
  }
}
