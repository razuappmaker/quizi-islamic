// mcq_security_manager.dart - FINAL CLEAN VERSION with Language Support
import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:provider/provider.dart';
import 'network_json_loader.dart';
import '../providers/language_provider.dart';
import '../utils/point_manager.dart';

class AnswerResult {
  final bool isCorrect;
  final int earnedPoints;

  AnswerResult({required this.isCorrect, required this.earnedPoints});
}

class MCQSecurityManager {
  // ==================== QUIZ DATA ====================
  List<dynamic> questions = [];
  int score = 0;
  bool quizStarted = false;

  // ==================== POINTS SYSTEM ====================
  int _totalEarnedPoints = 0;
  bool pointsAdded = false;
  bool _quizRecorded = false;

  // ==================== USER STATISTICS ====================
  int _totalQuestionsAnswered = 0;
  int _totalCorrectAnswers = 0;
  int _totalPointsEarned = 0;

  // ==================== LANGUAGE ====================
  bool get _isEnglish => _languageProvider?.isEnglish ?? false;
  LanguageProvider? _languageProvider;

  // ==================== CURRENT QUIZ ID ====================
  String _currentQuizId = '';

  // ==================== CATEGORY MAPPING ====================
  final Map<String, Map<String, String>> _categoryMappings = {
    // English categories
    'Basic Islamic Knowledge': {
      'en': 'Basic Islamic Knowledge',
      'bn': '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßÄ ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶ú‡ßç‡¶û‡¶æ‡¶®',
    },
    'Quran': {'en': 'Quran', 'bn': '‡¶ï‡ßã‡¶∞‡¶Ü‡¶®'},
    'Prophet Biography': {
      'en': 'Prophet Biography',
      'bn': '‡¶Æ‡¶π‡¶æ‡¶®‡¶¨‡ßÄ ‡¶∏‡¶É ‡¶è‡¶∞ ‡¶ú‡ßÄ‡¶¨‡¶®‡ßÄ',
    },
    'Worship': {'en': 'Worship', 'bn': '‡¶á‡¶¨‡¶æ‡¶¶‡¶§'},
    'Hereafter': {'en': 'Hereafter', 'bn': '‡¶Ü‡¶ñ‡¶ø‡¶∞‡¶æ‡¶§'},
    'Judgment Day': {'en': 'Judgment Day', 'bn': '‡¶¨‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶¨‡¶∏'},
    'Women in Islam': {'en': 'Women in Islam', 'bn': '‡¶®‡¶æ‡¶∞‡ßÄ ‡¶ì ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ'},
    'Islamic Ethics & Manners': {
      'en': 'Islamic Ethics & Manners',
      'bn': '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßÄ ‡¶®‡ßà‡¶§‡¶ø‡¶ï‡¶§‡¶æ ‡¶ì ‡¶Ü‡¶ö‡¶æ‡¶∞',
    },
    'Religious Law (Marriage-Divorce)': {
      'en': 'Religious Law (Marriage-Divorce)',
      'bn': '‡¶ß‡¶∞‡ßç‡¶Æ‡ßÄ‡ßü ‡¶Ü‡¶á‡¶®(‡¶¨‡¶ø‡¶¨‡¶æ‡¶π-‡¶¨‡¶ø‡¶ö‡ßç‡¶õ‡ßá‡¶¶)',
    },
    'Etiquette': {'en': 'Etiquette', 'bn': '‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡¶æ‡¶ö‡¶æ‡¶∞'},
    'Marital & Family Relations': {
      'en': 'Marital & Family Relations',
      'bn': '‡¶¶‡¶æ‡¶Æ‡ßç‡¶™‡¶§‡ßç‡¶Ø ‡¶ì ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï',
    },
    'Hadith': {'en': 'Hadith', 'bn': '‡¶π‡¶æ‡¶¶‡¶ø‡¶∏'},
    'Prophets': {'en': 'Prophets', 'bn': '‡¶®‡¶¨‡ßÄ-‡¶∞‡¶æ‡¶∏‡ßÇ‡¶≤'},
    'Islamic History': {'en': 'Islamic History', 'bn': '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏'},
  };

  // ==================== TEXT DICTIONARY ====================
  static const Map<String, Map<String, String>> _texts = {
    'searchGoogle': {'en': 'Search on Google', 'bn': '‡¶ó‡ßÅ‡¶ó‡¶≤‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®'},
    'searchConfirmation': {
      'en': 'Do you want to search Google for the question:',
      'bn': '‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø "‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®" ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶ó‡ßÅ‡¶ó‡¶≤‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?',
    },
    'cancel': {'en': 'Cancel', 'bn': '‡¶¨‡¶æ‡¶§‡¶ø‡¶≤'},
    'search': {'en': 'Search', 'bn': '‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®'},
    'googleSearchError': {
      'en': 'Cannot open Google search',
      'bn': '‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ',
    },
    'searchError': {
      'en': 'Error opening Google search',
      'bn': '‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ñ‡ßÅ‡¶≤‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø',
    },
    'noQuestionsLoaded': {
      'en': 'No questions loaded',
      'bn': '‡¶ï‡ßã‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø',
    },
    'noQuestionsForCategory': {
      'en': 'No questions found for this category',
      'bn': '‡¶è‡¶á ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø',
    },
    'questionLoadError': {
      'en': 'Questions could not be loaded',
      'bn': '‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø',
    },
    'quizNotAvailable': {'en': 'Quiz not available', 'bn': '‡¶ï‡ßÅ‡¶á‡¶ú ‡¶ñ‡ßá‡¶≤‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ'},
    'unknownReason': {'en': 'Unknown reason', 'bn': '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶ï‡¶æ‡¶∞‡¶£'},
  };

  // ==================== HELPER METHOD ====================
  String _text(String key, BuildContext context) {
    final langKey = _isEnglish ? 'en' : 'bn';
    return _texts[key]?[langKey] ?? key;
  }

  // ==================== INITIALIZATION ====================

  /// ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> initialize({
    required String category,
    required String quizId,
    required BuildContext context,
  }) async {
    try {
      print('üîÑ QUIZ INITIALIZATION STARTED...');

      // Set language provider from context
      _languageProvider = Provider.of<LanguageProvider>(context, listen: false);

      final String mappedQuizId = getMappedQuizId(category, context);
      _currentQuizId = mappedQuizId;

      print('üìù Category: $category ‚Üí Mapped: $mappedQuizId');
      print('üåê Language: ${_isEnglish ? 'English' : 'Bengali'}');

      // Security check
      final canPlayResult = await PointManager.canPlayQuiz(mappedQuizId);

      print('üîç Security Check Result:');
      print('   - Can Play: ${canPlayResult['canPlay']}');
      print('   - Reason: ${canPlayResult['reason']}');
      print('   - Remaining Points: ${canPlayResult['remainingPoints']}');

      if (!canPlayResult['canPlay']) {
        final String errorMessage =
            canPlayResult['message'] ?? _text('quizNotAvailable', context);
        final String reason =
            canPlayResult['reason'] ?? _text('unknownReason', context);
        throw Exception('$reason: $errorMessage');
      }

      // Load questions with language support
      await loadQuestions(mappedQuizId, context);

      if (questions.isEmpty) {
        throw Exception(_text('noQuestionsLoaded', context));
      }

      // Initialize stats
      await _initializeUserStats();

      quizStarted = true;
      _quizRecorded = false;

      print('‚úÖ INITIALIZATION COMPLETED - Questions: ${questions.length}');
    } catch (e) {
      print('‚ùå INITIALIZATION FAILED: $e');
      _resetQuizState();
      rethrow;
    }
  }

  // ==================== ANSWER CHECKING ====================

  /// ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  AnswerResult checkAnswer({
    required String selected,
    required int currentQuestionIndex,
    required int timeLeft,
  }) {
    // Security checks
    if (!quizStarted ||
        questions.isEmpty ||
        currentQuestionIndex >= questions.length) {
      return AnswerResult(isCorrect: false, earnedPoints: 0);
    }

    final question = questions[currentQuestionIndex];

    if (!validateAnswerFormat(question)) {
      return AnswerResult(isCorrect: false, earnedPoints: 0);
    }

    final isCorrect = selected == question['answer'];
    int pointsForThisQuestion = _calculatePoints(isCorrect, timeLeft);

    print('üéØ Answer: Correct=$isCorrect, Points=$pointsForThisQuestion');

    // Update scores
    if (isCorrect) {
      score++;
      _totalCorrectAnswers++;
    }

    _totalQuestionsAnswered++;
    _totalEarnedPoints += pointsForThisQuestion;
    _totalPointsEarned += pointsForThisQuestion;

    // üî• CRITICAL FIX: Record quiz play ONLY on first answer
    if (!_quizRecorded) {
      _recordQuizPlay();
      _quizRecorded = true;
    } else {
      // üî• ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ
      _updateQuizRecord();
    }

    // Update stats
    _updateUserStats();

    // Finalize if last question
    if (currentQuestionIndex == questions.length - 1) {
      _finalizeQuiz();
    }

    return AnswerResult(
      isCorrect: isCorrect,
      earnedPoints: pointsForThisQuestion,
    );
  }

  // ==================== POINTS MANAGEMENT ====================

  /// ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶® ‡¶Æ‡ßá‡¶•‡¶°
  int _calculatePoints(bool isCorrect, int timeLeft) {
    if (!isCorrect) {
      return 1; // Participation points
    }

    // Points based on time left
    if (timeLeft >= 15)
      return 10;
    else if (timeLeft >= 10)
      return 8;
    else if (timeLeft >= 5)
      return 5;
    else
      return 3;
  }

  // ==================== QUIZ RECORDING ====================

  /// ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶ñ‡ßá‡¶≤‡¶æ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> _recordQuizPlay() async {
    try {
      if (_currentQuizId.isEmpty) return;

      await PointManager.recordQuizPlay(
        quizId: _currentQuizId,
        pointsEarned: _totalEarnedPoints,
        correctAnswers: score,
        totalQuestions: questions.length,
      );

      print('‚úÖ Quiz play recorded with ${_totalEarnedPoints} points');
    } catch (e) {
      print('‚ùå Error recording quiz play: $e');
    }
  }

  /// ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> _updateQuizRecord() async {
    try {
      if (_currentQuizId.isEmpty || !_quizRecorded) return;

      await PointManager.recordQuizPlay(
        quizId: _currentQuizId,
        pointsEarned: _totalEarnedPoints,
        correctAnswers: score,
        totalQuestions: questions.length,
      );

      print('‚úÖ Quiz record updated with ${_totalEarnedPoints} points');
    } catch (e) {
      print('‚ùå Error updating quiz record: $e');
    }
  }

  /// ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> _finalizeQuiz() async {
    try {
      if (_currentQuizId.isEmpty) return;

      await PointManager.recordQuizPlay(
        quizId: _currentQuizId,
        pointsEarned: _totalEarnedPoints,
        correctAnswers: score,
        totalQuestions: questions.length,
      );

      print(
        '‚úÖ Quiz finalized - Total Points: $_totalEarnedPoints, Correct: $score',
      );
    } catch (e) {
      print('‚ùå Error finalizing quiz: $e');
    }
  }

  // ==================== USER STATS MANAGEMENT ====================

  /// ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> _updateUserStats() async {
    try {
      await PointManager.updateQuizStats(score);
    } catch (e) {
      print("‚ùå Error updating stats: $e");
    }
  }

  /// ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶∏ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> _initializeUserStats() async {
    _totalQuestionsAnswered = 0;
    _totalCorrectAnswers = 0;
    _totalPointsEarned = 0;
    score = 0;
    _totalEarnedPoints = 0;
    _quizRecorded = false;
  }

  /// ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  void _resetQuizState() {
    quizStarted = false;
    questions = [];
    score = 0;
    _totalEarnedPoints = 0;
    _quizRecorded = false;
  }

  // ==================== QUESTION LOADING ====================

  /// ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶° - ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ
  Future<void> loadQuestions(String quizId, BuildContext context) async {
    try {
      // ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ JSON ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
      final String fileName = _isEnglish
          ? 'assets/en_questions.json'
          : 'assets/questions.json';

      print('üìÅ Loading questions from: $fileName');

      // Try network first
      try {
        final List<dynamic> allQuestionsData =
            await NetworkJsonLoader.loadJsonList(fileName);
        if (allQuestionsData.isNotEmpty) {
          Map<dynamic, dynamic> questionsMap = {};
          for (var item in allQuestionsData) {
            if (item is Map) questionsMap.addAll(item as Map<dynamic, dynamic>);
          }
          _setQuestionsFromMap(questionsMap, quizId, context);
          return;
        }
      } catch (e) {
        print('‚ùå Network load failed: $e');
      }

      // Fallback to local
      try {
        final String localResponse = await rootBundle.loadString(fileName);
        final Map<dynamic, dynamic> localData = json.decode(localResponse);
        _setQuestionsFromMap(localData, quizId, context);
        return;
      } catch (e) {
        print('‚ùå Local load failed: $e');
      }

      throw Exception(_text('questionLoadError', context));
    } catch (e) {
      print('‚ùå All question loading methods failed: $e');
      rethrow;
    }
  }

  /// ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  void _setQuestionsFromMap(
    Map<dynamic, dynamic> questionsMap,
    String quizId,
    BuildContext context,
  ) {
    final quizIdString = quizId.toString();
    final availableKeys = questionsMap.keys.map((k) => k.toString()).toList();

    print('üîç Looking for quiz ID: $quizIdString');
    print('üìã Available keys: $availableKeys');

    // Exact match
    if (questionsMap.containsKey(quizIdString)) {
      final questionsData = questionsMap[quizIdString];
      if (questionsData is List) {
        questions = List<dynamic>.from(questionsData);
        print('‚úÖ Exact match found - Questions: ${questions.length}');
        return;
      }
    }

    // Partial match
    for (final key in questionsMap.keys) {
      final keyString = key.toString();
      if (keyString.toLowerCase().contains(quizIdString.toLowerCase()) ||
          quizIdString.toLowerCase().contains(keyString.toLowerCase())) {
        final questionsData = questionsMap[key];
        if (questionsData is List) {
          questions = List<dynamic>.from(questionsData);
          print('‚úÖ Partial match found - Questions: ${questions.length}');
          return;
        }
      }
    }

    throw Exception(_text('noQuestionsForCategory', context));
  }

  // ==================== VALIDATION METHODS ====================

  /// ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶á‡¶®‡ßç‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶® ‡¶Æ‡ßá‡¶•‡¶°
  bool validateQuestionIndex(int index) {
    return index >= 0 && index < questions.length;
  }

  /// ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶® ‡¶Æ‡ßá‡¶•‡¶°
  bool validateAnswerFormat(dynamic question) {
    if (question is! Map<String, dynamic>) return false;
    if (question['question'] is! String) return false;
    if (question['options'] is! List<dynamic>) return false;
    if (question['answer'] is! String) return false;

    final options = List<String>.from(question['options']);
    return options.contains(question['answer']);
  }

  // ==================== EXTERNAL SERVICES ====================

  /// ‡¶ó‡ßÅ‡¶ó‡¶≤‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶° - ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ
  Future<void> searchOnGoogle({
    required BuildContext context,
    required String question,
  }) async {
    try {
      final bool? shouldSearch = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          title: Text(_text('searchGoogle', context)),
          content: Text('${_text('searchConfirmation', context)} "$question"?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: Text(_text('cancel', context)),
            ),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: Text(_text('search', context)),
            ),
          ],
        ),
      );

      if (shouldSearch == true) {
        final encodedQuestion = Uri.encodeComponent('$question ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®');
        final url = 'https://www.google.com/search?q=$encodedQuestion';

        if (await canLaunchUrl(Uri.parse(url))) {
          await launchUrl(Uri.parse(url), mode: LaunchMode.externalApplication);
        } else {
          _showErrorSnackBar(context, _text('googleSearchError', context));
        }
      }
    } catch (e) {
      print('‚ùå Google search error: $e');
      _showErrorSnackBar(context, _text('searchError', context));
    }
  }

  /// ‡¶è‡¶∞‡¶∞ ‡¶∏‡ßç‡¶®‡ßç‡¶Ø‡¶æ‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  void _showErrorSnackBar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red[700],
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  // ==================== CATEGORY UTILITIES ====================

  /// ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶•‡¶° - ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ
  String getMappedQuizId(String category, BuildContext context) {
    final langKey = _isEnglish ? 'en' : 'bn';

    // First try exact match
    if (_categoryMappings.containsKey(category)) {
      return _categoryMappings[category]![langKey] ?? category;
    }

    // Then try case-insensitive match
    for (final key in _categoryMappings.keys) {
      if (key.toLowerCase() == category.toLowerCase()) {
        return _categoryMappings[key]![langKey] ?? category;
      }
    }

    // Return original if no match found
    return category;
  }

  /// ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶ö‡ßá‡¶ï ‡¶Æ‡ßá‡¶•‡¶°
  bool isValidCategory(String category) {
    return _categoryMappings.containsKey(category);
  }

  /// ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≠‡ßá‡¶á‡¶≤‡ßá‡¶¨‡¶≤ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶° - ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ
  List<String> getAvailableCategories(BuildContext context) {
    final langKey = _isEnglish ? 'en' : 'bn';
    return _categoryMappings.values
        .map((map) => map[langKey] ?? '')
        .where((category) => category.isNotEmpty)
        .toList();
  }

  // ==================== GETTERS ====================

  int get totalQuestions => questions.length;

  int get totalScore => score;

  int get totalQuestionsAnswered => _totalQuestionsAnswered;

  int get totalCorrectAnswers => _totalCorrectAnswers;

  int get totalPointsEarned => _totalPointsEarned;

  int calculateTotalPoints() => _totalEarnedPoints;

  double get accuracyRate => _totalQuestionsAnswered > 0
      ? (_totalCorrectAnswers / _totalQuestionsAnswered) * 100
      : 0.0;

  /// ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶° (‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶Ø‡¶º)
  void setLanguageProvider(LanguageProvider provider) {
    _languageProvider = provider;
  }

  /// ‡¶°‡¶ø‡¶∏‡¶™‡ßã‡¶ú ‡¶Æ‡ßá‡¶•‡¶°
  void dispose() {
    questions.clear();
    score = 0;
    _totalEarnedPoints = 0;
    pointsAdded = false;
    quizStarted = false;
    _quizRecorded = false;
    _languageProvider = null;
  }
}
