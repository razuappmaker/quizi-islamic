// mcq_security_manager.dart - FINAL CLEAN VERSION
import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:url_launcher/url_launcher.dart';
import 'network_json_loader.dart';
import '../utils/point_manager.dart';

class AnswerResult {
  final bool isCorrect;
  final int earnedPoints;

  AnswerResult({required this.isCorrect, required this.earnedPoints});
}

class MCQSecurityManager {
  // ==================== QUIZ DATA ====================
  List<dynamic> questions = [];
  int score = 0;
  bool quizStarted = false;

  // ==================== POINTS SYSTEM ====================
  int _totalEarnedPoints = 0;
  bool pointsAdded = false;
  bool _quizRecorded = false;

  // ==================== USER STATISTICS ====================
  int _totalQuestionsAnswered = 0;
  int _totalCorrectAnswers = 0;
  int _totalPointsEarned = 0;

  // ==================== LANGUAGE ====================
  bool _isEnglish = false;

  // ==================== CURRENT QUIZ ID ====================
  String _currentQuizId = '';

  // ==================== CATEGORY MAPPING ====================
  final Map<String, String> _categoryMappings = {
    // English categories
    'Basic Islamic Knowledge': 'Basic Islamic Knowledge',
    'Quran': 'Quran',
    'Prophet Biography': 'Prophet Biography',
    'Worship': 'Worship',
    'Hereafter': 'Hereafter',
    'Judgment Day': 'Judgment Day',
    'Women in Islam': 'Women in Islam',
    'Islamic Ethics & Manners': 'Islamic Ethics & Manners',
    'Religious Law (Marriage-Divorce)': 'Religious Law (Marriage-Divorce)',
    'Etiquette': 'Etiquette',
    'Marital & Family Relations': 'Marital & Family Relations',
    'Hadith': 'Hadith',
    'Prophets': 'Prophets',
    'Islamic History': 'Islamic History',

    // Bengali categories
    '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßÄ ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶ú‡ßç‡¶û‡¶æ‡¶®': '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßÄ ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶ú‡ßç‡¶û‡¶æ‡¶®',
    '‡¶ï‡ßã‡¶∞‡¶Ü‡¶®': '‡¶ï‡ßã‡¶∞‡¶Ü‡¶®',
    '‡¶Æ‡¶π‡¶æ‡¶®‡¶¨‡ßÄ ‡¶∏‡¶É ‡¶è‡¶∞ ‡¶ú‡ßÄ‡¶¨‡¶®‡ßÄ': '‡¶Æ‡¶π‡¶æ‡¶®‡¶¨‡ßÄ ‡¶∏‡¶É ‡¶è‡¶∞ ‡¶ú‡ßÄ‡¶¨‡¶®‡ßÄ',
    '‡¶á‡¶¨‡¶æ‡¶¶‡¶§': '‡¶á‡¶¨‡¶æ‡¶¶‡¶§',
    '‡¶Ü‡¶ñ‡¶ø‡¶∞‡¶æ‡¶§': '‡¶Ü‡¶ñ‡¶ø‡¶∞‡¶æ‡¶§',
    '‡¶¨‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶¨‡¶∏': '‡¶¨‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶¨‡¶∏',
    '‡¶®‡¶æ‡¶∞‡ßÄ ‡¶ì ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ': '‡¶®‡¶æ‡¶∞‡ßÄ ‡¶ì ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ',
    '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßÄ ‡¶®‡ßà‡¶§‡¶ø‡¶ï‡¶§‡¶æ ‡¶ì ‡¶Ü‡¶ö‡¶æ‡¶∞': '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßÄ ‡¶®‡ßà‡¶§‡¶ø‡¶ï‡¶§‡¶æ ‡¶ì ‡¶Ü‡¶ö‡¶æ‡¶∞',
    '‡¶ß‡¶∞‡ßç‡¶Æ‡ßÄ‡ßü ‡¶Ü‡¶á‡¶®(‡¶¨‡¶ø‡¶¨‡¶æ‡¶π-‡¶¨‡¶ø‡¶ö‡ßç‡¶õ‡ßá‡¶¶)': '‡¶ß‡¶∞‡ßç‡¶Æ‡ßÄ‡ßü ‡¶Ü‡¶á‡¶®(‡¶¨‡¶ø‡¶¨‡¶æ‡¶π-‡¶¨‡¶ø‡¶ö‡ßç‡¶õ‡ßá‡¶¶)',
    '‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡¶æ‡¶ö‡¶æ‡¶∞': '‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡¶æ‡¶ö‡¶æ‡¶∞',
    '‡¶¶‡¶æ‡¶Æ‡ßç‡¶™‡¶§‡ßç‡¶Ø ‡¶ì ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï': '‡¶¶‡¶æ‡¶Æ‡ßç‡¶™‡¶§‡ßç‡¶Ø ‡¶ì ‡¶™‡¶æ‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï',
    '‡¶π‡¶æ‡¶¶‡¶ø‡¶∏': '‡¶π‡¶æ‡¶¶‡¶ø‡¶∏',
    '‡¶®‡¶¨‡ßÄ-‡¶∞‡¶æ‡¶∏‡ßÇ‡¶≤': '‡¶®‡¶¨‡ßÄ-‡¶∞‡¶æ‡¶∏‡ßÇ‡¶≤',
    '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏': '‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏',
  };

  // ==================== INITIALIZATION ====================

  /// ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶® ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> initialize({
    required String category,
    required String quizId,
  }) async {
    try {
      print('üîÑ QUIZ INITIALIZATION STARTED...');

      final String mappedQuizId = getMappedQuizId(category);
      _currentQuizId = mappedQuizId;

      print('üìù Category: $category ‚Üí Mapped: $mappedQuizId');

      // Security check
      final canPlayResult = await PointManager.canPlayQuiz(mappedQuizId);

      print('üîç Security Check Result:');
      print('   - Can Play: ${canPlayResult['canPlay']}');
      print('   - Reason: ${canPlayResult['reason']}');
      print('   - Remaining Points: ${canPlayResult['remainingPoints']}');

      if (!canPlayResult['canPlay']) {
        final String errorMessage =
            canPlayResult['message'] ?? '‡¶ï‡ßÅ‡¶á‡¶ú ‡¶ñ‡ßá‡¶≤‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ';
        final String reason = canPlayResult['reason'] ?? '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶ï‡¶æ‡¶∞‡¶£';
        throw Exception('$reason: $errorMessage');
      }

      // Load questions
      await loadQuestions(mappedQuizId);

      if (questions.isEmpty) {
        throw Exception('‡¶ï‡ßã‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø');
      }

      // Initialize stats
      await _initializeUserStats();

      quizStarted = true;
      _quizRecorded = false;

      print('‚úÖ INITIALIZATION COMPLETED - Questions: ${questions.length}');
    } catch (e) {
      print('‚ùå INITIALIZATION FAILED: $e');
      _resetQuizState();
      rethrow;
    }
  }

  // ==================== ANSWER CHECKING ====================

  /// ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  AnswerResult checkAnswer({
    required String selected,
    required int currentQuestionIndex,
    required int timeLeft,
  }) {
    // Security checks
    if (!quizStarted ||
        questions.isEmpty ||
        currentQuestionIndex >= questions.length) {
      return AnswerResult(isCorrect: false, earnedPoints: 0);
    }

    final question = questions[currentQuestionIndex];

    if (!validateAnswerFormat(question)) {
      return AnswerResult(isCorrect: false, earnedPoints: 0);
    }

    final isCorrect = selected == question['answer'];
    int pointsForThisQuestion = _calculatePoints(isCorrect, timeLeft);

    print('üéØ Answer: Correct=$isCorrect, Points=$pointsForThisQuestion');

    // Update scores
    if (isCorrect) {
      score++;
      _totalCorrectAnswers++;
    }

    _totalQuestionsAnswered++;
    _totalEarnedPoints += pointsForThisQuestion;
    _totalPointsEarned += pointsForThisQuestion;

    // üî• CRITICAL FIX: Record quiz play ONLY on first answer
    if (!_quizRecorded) {
      _recordQuizPlay();
      _quizRecorded = true;
    } else {
      // üî• ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßá ‡¶®‡¶æ
      _updateQuizRecord();
    }

    // Add points and update stats
    //_addPointsToUser(pointsForThisQuestion);
    _updateUserStats();

    // Finalize if last question
    if (currentQuestionIndex == questions.length - 1) {
      _finalizeQuiz();
    }

    return AnswerResult(
      isCorrect: isCorrect,
      earnedPoints: pointsForThisQuestion,
    );
  }

  // ==================== POINTS MANAGEMENT ====================

  /// ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶® ‡¶Æ‡ßá‡¶•‡¶°
  int _calculatePoints(bool isCorrect, int timeLeft) {
    if (!isCorrect) {
      return 1; // Participation points
    }

    // Points based on time left
    if (timeLeft >= 15)
      return 10;
    else if (timeLeft >= 10)
      return 8;
    else if (timeLeft >= 5)
      return 5;
    else
      return 3;
  }

  /// ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  /*Future<void> _addPointsToUser(int earnedPoints) async {
    try {
      // Security checks
      if (earnedPoints <= 0 || earnedPoints > 100) {
        print('‚ö†Ô∏è Invalid points amount: $earnedPoints');
        return;
      }

      // üî• Check daily limit BEFORE adding points
      final totalPointsToday = await PointManager.getTotalPointsToday();
      if (totalPointsToday >= PointManager.MAX_POINTS_PER_DAY) {
        print('üö´ Daily points limit reached, skipping points addition');
        return;
      }

      // üî• Ensure we don't exceed daily limit
      int pointsToAdd = earnedPoints;
      if (totalPointsToday + earnedPoints > PointManager.MAX_POINTS_PER_DAY) {
        pointsToAdd = PointManager.MAX_POINTS_PER_DAY - totalPointsToday;
        print(
          'üéØ Capping points: $earnedPoints ‚Üí $pointsToAdd (to stay within daily limit)',
        );
      }

      // Add points
      if (pointsToAdd > 0) {
        await PointManager.addPoints(pointsToAdd);
        print("‚úÖ $pointsToAdd points added to user account");
      } else {
        print('‚è≠Ô∏è No points added (Daily limit reached)');
      }
    } catch (e) {
      print("‚ùå Error adding points: $e");
    }
  }*/

  // ==================== QUIZ RECORDING ====================

  /// ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶ñ‡ßá‡¶≤‡¶æ ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> _recordQuizPlay() async {
    try {
      if (_currentQuizId.isEmpty) return;

      await PointManager.recordQuizPlay(
        quizId: _currentQuizId,
        pointsEarned: _totalEarnedPoints,
        correctAnswers: score,
        totalQuestions: questions.length,
      );

      print('‚úÖ Quiz play recorded with ${_totalEarnedPoints} points');
    } catch (e) {
      print('‚ùå Error recording quiz play: $e');
    }
  }

  /// ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> _updateQuizRecord() async {
    try {
      if (_currentQuizId.isEmpty || !_quizRecorded) return;

      await PointManager.recordQuizPlay(
        quizId: _currentQuizId,
        pointsEarned: _totalEarnedPoints,
        correctAnswers: score,
        totalQuestions: questions.length,
      );

      print('‚úÖ Quiz record updated with ${_totalEarnedPoints} points');
    } catch (e) {
      print('‚ùå Error updating quiz record: $e');
    }
  }

  /// ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> _finalizeQuiz() async {
    try {
      if (_currentQuizId.isEmpty) return;

      await PointManager.recordQuizPlay(
        quizId: _currentQuizId,
        pointsEarned: _totalEarnedPoints,
        correctAnswers: score,
        totalQuestions: questions.length,
      );

      print(
        '‚úÖ Quiz finalized - Total Points: $_totalEarnedPoints, Correct: $score',
      );
    } catch (e) {
      print('‚ùå Error finalizing quiz: $e');
    }
  }

  // ==================== USER STATS MANAGEMENT ====================

  /// ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶∏ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> _updateUserStats() async {
    try {
      await PointManager.updateQuizStats(score);
    } catch (e) {
      print("‚ùå Error updating stats: $e");
    }
  }

  /// ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶∏ ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> _initializeUserStats() async {
    _totalQuestionsAnswered = 0;
    _totalCorrectAnswers = 0;
    _totalPointsEarned = 0;
    score = 0;
    _totalEarnedPoints = 0;
    _quizRecorded = false;
  }

  /// ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶∏‡ßç‡¶ü‡ßá‡¶ü ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  void _resetQuizState() {
    quizStarted = false;
    questions = [];
    score = 0;
    _totalEarnedPoints = 0;
    _quizRecorded = false;
  }

  // ==================== QUESTION LOADING ====================

  /// ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> loadQuestions(String quizId) async {
    try {
      final String fileName = _isEnglish
          ? 'assets/enquestions.json'
          : 'assets/questions.json';

      // Try network first
      try {
        final List<dynamic> allQuestionsData =
            await NetworkJsonLoader.loadJsonList(fileName);
        if (allQuestionsData.isNotEmpty) {
          Map<dynamic, dynamic> questionsMap = {};
          for (var item in allQuestionsData) {
            if (item is Map) questionsMap.addAll(item as Map<dynamic, dynamic>);
          }
          _setQuestionsFromMap(questionsMap, quizId);
          return;
        }
      } catch (e) {
        print('‚ùå Network load failed: $e');
      }

      // Fallback to local
      try {
        final String localResponse = await rootBundle.loadString(fileName);
        final Map<dynamic, dynamic> localData = json.decode(localResponse);
        _setQuestionsFromMap(localData, quizId);
        return;
      } catch (e) {
        print('‚ùå Local load failed: $e');
      }

      throw Exception('‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø');
    } catch (e) {
      print('‚ùå All question loading methods failed: $e');
      rethrow;
    }
  }

  /// ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  void _setQuestionsFromMap(Map<dynamic, dynamic> questionsMap, String quizId) {
    final quizIdString = quizId.toString();
    final availableKeys = questionsMap.keys.map((k) => k.toString()).toList();

    // Exact match
    if (questionsMap.containsKey(quizIdString)) {
      final questionsData = questionsMap[quizIdString];
      if (questionsData is List) {
        questions = List<dynamic>.from(questionsData);
        return;
      }
    }

    // Partial match
    for (final key in questionsMap.keys) {
      final keyString = key.toString();
      if (keyString.toLowerCase().contains(quizIdString.toLowerCase()) ||
          quizIdString.toLowerCase().contains(keyString.toLowerCase())) {
        final questionsData = questionsMap[key];
        if (questionsData is List) {
          questions = List<dynamic>.from(questionsData);
          return;
        }
      }
    }

    throw Exception('‡¶è‡¶á ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶® ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø');
  }

  // ==================== VALIDATION METHODS ====================

  /// ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶á‡¶®‡ßç‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶® ‡¶Æ‡ßá‡¶•‡¶°
  bool validateQuestionIndex(int index) {
    return index >= 0 && index < questions.length;
  }

  /// ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶® ‡¶Æ‡ßá‡¶•‡¶°
  bool validateAnswerFormat(dynamic question) {
    if (question is! Map<String, dynamic>) return false;
    if (question['question'] is! String) return false;
    if (question['options'] is! List<dynamic>) return false;
    if (question['answer'] is! String) return false;

    final options = List<String>.from(question['options']);
    return options.contains(question['answer']);
  }

  // ==================== EXTERNAL SERVICES ====================

  /// ‡¶ó‡ßÅ‡¶ó‡¶≤‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  Future<void> searchOnGoogle({
    required BuildContext context,
    required String question,
  }) async {
    try {
      final bool? shouldSearch = await showDialog<bool>(
        context: context,
        builder: (context) => AlertDialog(
          title: const Text('‡¶ó‡ßÅ‡¶ó‡¶≤‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®'),
          content: Text('‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø "$question" ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶ó‡ßÅ‡¶ó‡¶≤‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('‡¶¨‡¶æ‡¶§‡¶ø‡¶≤'),
            ),
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: const Text('‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßÅ‡¶®'),
            ),
          ],
        ),
      );

      if (shouldSearch == true) {
        final encodedQuestion = Uri.encodeComponent('$question ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®');
        final url = 'https://www.google.com/search?q=$encodedQuestion';

        if (await canLaunchUrl(Uri.parse(url))) {
          await launchUrl(Uri.parse(url), mode: LaunchMode.externalApplication);
        } else {
          _showErrorSnackBar(context, '‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ');
        }
      }
    } catch (e) {
      print('‚ùå Google search error: $e');
      _showErrorSnackBar(context, '‡¶ó‡ßÅ‡¶ó‡¶≤ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ñ‡ßÅ‡¶≤‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø');
    }
  }

  /// ‡¶è‡¶∞‡¶∞ ‡¶∏‡ßç‡¶®‡ßç‡¶Ø‡¶æ‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
  void _showErrorSnackBar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red[700],
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  // ==================== CATEGORY UTILITIES ====================

  /// ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶•‡¶°
  String getMappedQuizId(String category) {
    return _categoryMappings[category] ?? category;
  }

  /// ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶ö‡ßá‡¶ï ‡¶Æ‡ßá‡¶•‡¶°
  bool isValidCategory(String category) {
    return _categoryMappings.containsKey(category);
  }

  /// ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶≠‡ßá‡¶á‡¶≤‡ßá‡¶¨‡¶≤ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶ó‡¶∞‡¶ø ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶°
  List<String> getAvailableCategories() {
    return _categoryMappings.keys.toList();
  }

  // ==================== GETTERS ====================

  int get totalQuestions => questions.length;

  int get totalScore => score;

  int get totalQuestionsAnswered => _totalQuestionsAnswered;

  int get totalCorrectAnswers => _totalCorrectAnswers;

  int get totalPointsEarned => _totalPointsEarned;

  int calculateTotalPoints() => _totalEarnedPoints;

  double get accuracyRate => _totalQuestionsAnswered > 0
      ? (_totalCorrectAnswers / _totalQuestionsAnswered) * 100
      : 0.0;

  // ==================== DEBUGGING UTILITIES ====================

  // TODO: Remove debug methods after testing
  /*
  Future<void> _debugPointsStatus() async {
    try {
      final totalPointsToday = await PointManager.getTotalPointsToday();
      print('üîç DEBUG POINTS STATUS:');
      print('   - MAX_POINTS_PER_DAY: ${PointManager.MAX_POINTS_PER_DAY}');
      print('   - Total Points Today: $totalPointsToday');
      print('   - Remaining Points: ${PointManager.MAX_POINTS_PER_DAY - totalPointsToday}');
    } catch (e) {
      print('‚ùå Error checking points status: $e');
    }
  }

  void printDebugInfo(String category, String quizId) {
    print('=== MCQ SECURITY MANAGER DEBUG INFO ===');
    print('üìù Category: $category');
    print('üîë Quiz ID: $quizId');
    print('üó∫Ô∏è Mapped Quiz ID: ${getMappedQuizId(category)}');
    print('üìä Questions Loaded: ${questions.length}');
    print('‚úÖ Valid Category: ${isValidCategory(category)}');
    print('üéØ Quiz Started: $quizStarted');
    print('üìù Quiz Recorded: $_quizRecorded');
    print('üí∞ Total Earned Points: $_totalEarnedPoints');
    print('=== END DEBUG INFO ===');
  }
  */

  // ==================== CLEANUP ====================

  /// ‡¶°‡¶ø‡¶∏‡¶™‡ßã‡¶ú ‡¶Æ‡ßá‡¶•‡¶°
  void dispose() {
    questions.clear();
    score = 0;
    _totalEarnedPoints = 0;
    pointsAdded = false;
    quizStarted = false;
    _quizRecorded = false;
  }
}
